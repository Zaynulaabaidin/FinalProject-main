"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@opennextjs";
exports.ids = ["vendor-chunks/@opennextjs"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCloudflareContext: () => (/* binding */ getCloudflareContext),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* binding */ initOpenNextCloudflareForDev)\n/* harmony export */ });\n/**\n * Symbol used as an index in the global scope to set and retrieve the Cloudflare context\n *\n * This is used both in production (in the actual built worker) and in development (`next dev`)\n *\n * Note: this symbol needs to be kept in sync with the one used in `src/cli/templates/worker.ts`\n */\nconst cloudflareContextSymbol = Symbol.for(\"__cloudflare-context__\");\nfunction getCloudflareContext(options = { async: false }) {\n    return options.async ? getCloudflareContextAsync() : getCloudflareContextSync();\n}\n/**\n * Get the cloudflare context from the current global scope\n */\nfunction getCloudflareContextFromGlobalScope() {\n    const global = globalThis;\n    return global[cloudflareContextSymbol];\n}\n/**\n * Detects whether the current code is being evaluated in a statically generated route\n */\nfunction inSSG() {\n    const global = globalThis;\n    // Note: Next.js sets globalThis.__NEXT_DATA__.nextExport to true for SSG routes\n    // source: https://github.com/vercel/next.js/blob/4e394608423/packages/next/src/export/worker.ts#L55-L57)\n    return global.__NEXT_DATA__?.nextExport === true;\n}\n/**\n * Utility to get the current Cloudflare context in sync mode\n */\nfunction getCloudflareContextSync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // The sync mode of `getCloudflareContext`, relies on the context being set on the global state\n    // by either the worker entrypoint (in prod) or by `initOpenNextCloudflareForDev` (in dev), neither\n    // can work during SSG since for SSG Next.js creates (jest) workers that don't get access to the\n    // normal global state so we throw with a helpful error message.\n    if (inSSG()) {\n        throw new Error(`\\n\\nERROR: \\`getCloudflareContext\\` has been called in sync mode in either a static route or at the top level of a non-static one,` +\n            ` both cases are not allowed but can be solved by either:\\n` +\n            `  - make sure that the call is not at the top level and that the route is not static\\n` +\n            `  - call \\`getCloudflareContext({async: true})\\` to use the \\`async\\` mode\\n` +\n            `  - avoid calling \\`getCloudflareContext\\` in the route\\n`);\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Utility to get the current Cloudflare context in async mode\n */\nasync function getCloudflareContextAsync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // Note: Next.js sets process.env.NEXT_RUNTIME to 'nodejs' when the runtime in use is the node.js one\n    // We want to detect when the runtime is the node.js one so that during development (`next dev`) we know wether\n    // we are or not in a node.js process and that access to wrangler's node.js apis\n    const inNodejsRuntime = \"nodejs\" === \"nodejs\";\n    if (inNodejsRuntime || inSSG()) {\n        // we're in a node.js process and also in \"async mode\" so we can use wrangler to asynchronously get the context\n        const cloudflareContext = await getCloudflareContextFromWrangler();\n        addCloudflareContextToNodejsGlobal(cloudflareContext);\n        return cloudflareContext;\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Performs some initial setup to integrate as best as possible the local Next.js dev server (run via `next dev`)\n * with the open-next Cloudflare adapter\n *\n * Note: this function should only be called inside the Next.js config file, and although async it doesn't need to be `await`ed\n * @param options options on how the function should operate and if/where to persist the platform data\n */\nasync function initOpenNextCloudflareForDev(options) {\n    const shouldInitializationRun = shouldContextInitializationRun();\n    if (!shouldInitializationRun)\n        return;\n    if (options?.environment && process.env.NEXT_DEV_WRANGLER_ENV) {\n        console.warn(`'initOpenNextCloudflareForDev' has been called with an environment option while NEXT_DEV_WRANGLER_ENV is set.` +\n            ` NEXT_DEV_WRANGLER_ENV will be ignored and the environment will be set to: '${options.environment}'`);\n    }\n    const context = await getCloudflareContextFromWrangler(options);\n    addCloudflareContextToNodejsGlobal(context);\n    await monkeyPatchVmModuleEdgeContext(context);\n}\n/**\n * Next dev server imports the config file twice (in two different processes, making it hard to track),\n * this causes the initialization to run twice as well, to keep things clean, not allocate extra\n * resources (i.e. instantiate two miniflare instances) and avoid extra potential logs, it would be best\n * to run the initialization only once, this function is used to try to make it so that it does, it returns\n * a flag which indicates if the initialization should run in the current process or not.\n *\n * @returns boolean indicating if the initialization should run\n */\nfunction shouldContextInitializationRun() {\n    // via debugging we've seen that AsyncLocalStorage is only set in one of the\n    // two processes so we're using it as the differentiator between the two\n    const AsyncLocalStorage = globalThis[\"AsyncLocalStorage\"];\n    return !!AsyncLocalStorage;\n}\n/**\n * Adds the cloudflare context to the global scope of the current node.js process, enabling\n * future calls to `getCloudflareContext` to retrieve and return such context\n *\n * @param cloudflareContext the cloudflare context to add to the node.sj global scope\n */\nfunction addCloudflareContextToNodejsGlobal(cloudflareContext) {\n    const global = globalThis;\n    global[cloudflareContextSymbol] = cloudflareContext;\n}\n/**\n * Next.js uses the Node.js vm module's `runInContext()` function to evaluate edge functions\n * in a runtime context that tries to simulate as accurately as possible the actual production runtime\n * behavior, see: https://github.com/vercel/next.js/blob/9a1cd3/packages/next/src/server/web/sandbox/context.ts#L525-L527\n *\n * This function monkey-patches the Node.js `vm` module to override the `runInContext()` function so that the\n * cloudflare context is added to the runtime context's global scope before edge functions are evaluated\n *\n * @param cloudflareContext the cloudflare context to patch onto the \"edge\" runtime context global scope\n */\nasync function monkeyPatchVmModuleEdgeContext(cloudflareContext) {\n    const require = (await import(/* webpackIgnore: true */ `${\"__module\".replaceAll(\"_\", \"\")}`)).default.createRequire(\"file:///C:/Users/zainulaabaidin/Downloads/FinalProject-main/FinalProject-main/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n    // eslint-disable-next-line unicorn/prefer-node-protocol -- the `next dev` compiler doesn't accept the node prefix\n    const vmModule = require(\"vm\");\n    const originalRunInContext = vmModule.runInContext.bind(vmModule);\n    vmModule.runInContext = (code, contextifiedObject, options) => {\n        const runtimeContext = contextifiedObject;\n        runtimeContext[cloudflareContextSymbol] ??= cloudflareContext;\n        return originalRunInContext(code, contextifiedObject, options);\n    };\n}\n/**\n * Gets a cloudflare context object from wrangler\n *\n * @returns the cloudflare context ready for use\n */\nasync function getCloudflareContextFromWrangler(options) {\n    // Note: we never want wrangler to be bundled in the Next.js app, that's why the import below looks like it does\n    const { getPlatformProxy } = await import(/* webpackIgnore: true */ `${\"__wrangler\".replaceAll(\"_\", \"\")}`);\n    // This allows the selection of a wrangler environment while running in next dev mode\n    const environment = options?.environment ?? process.env.NEXT_DEV_WRANGLER_ENV;\n    const { env, cf, ctx } = await getPlatformProxy({\n        ...options,\n        environment,\n    });\n    return {\n        env,\n        cf: cf,\n        ctx: ctx,\n    };\n}\n// In production the cloudflare context is initialized by the worker so it is always available.\n// During local development (`next dev`) it might be missing only if the developers hasn't called\n// the `initOpenNextCloudflareForDev` function in their Next.js config file\nconst initOpenNextCloudflareForDevErrorMsg = `\\n\\nERROR: \\`getCloudflareContext\\` has been called without having called` +\n    ` \\`initOpenNextCloudflareForDev\\` from the Next.js config file.\\n` +\n    `You should update your Next.js config file as shown below:\\n\\n` +\n    \"   ```\\n   // next.config.mjs\\n\\n\" +\n    `   import { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\\n\\n` +\n    `   initOpenNextCloudflareForDev();\\n\\n` +\n    \"   const nextConfig = { ... };\\n\" +\n    \"   export default nextConfig;\\n\" +\n    \"   ```\\n\" +\n    \"\\n\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* binding */ defineCloudflareConfig),\n/* harmony export */   getDeploymentId: () => (/* binding */ getDeploymentId),\n/* harmony export */   getOpenNextConfig: () => (/* binding */ getOpenNextConfig)\n/* harmony export */ });\n/* harmony import */ var _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./overrides/asset-resolver/index.js */ \"(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\");\n\n/**\n * Defines the OpenNext configuration that targets the Cloudflare adapter\n *\n * @param config options that enabled you to configure the application's behavior\n * @returns the OpenNext configuration object\n */\nfunction defineCloudflareConfig(config = {}) {\n    const { incrementalCache, tagCache, queue, cachePurge, enableCacheInterception = false, routePreloadingBehavior = \"none\", } = config;\n    return {\n        default: {\n            override: {\n                wrapper: \"cloudflare-node\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n                cdnInvalidation: resolveCdnInvalidation(cachePurge),\n            },\n            routePreloadingBehavior,\n        },\n        // node:crypto is used to compute cache keys\n        edgeExternals: [\"node:crypto\"],\n        cloudflare: {\n            useWorkerdCondition: true,\n        },\n        dangerous: {\n            enableCacheInterception,\n        },\n        middleware: {\n            external: true,\n            override: {\n                wrapper: \"cloudflare-edge\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n            },\n            assetResolver: () => _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        },\n    };\n}\nfunction resolveIncrementalCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveTagCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveQueue(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveCdnInvalidation(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\n/**\n * @param buildOpts build options from AWS\n * @returns The OpenConfig specific to cloudflare\n */\nfunction getOpenNextConfig(buildOpts) {\n    return buildOpts.config;\n}\n/**\n * @returns Unique deployment ID\n */\nfunction getDeploymentId() {\n    return `dpl-${new Date().getTime().toString(36)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ab3Blbm5leHRqcy9jbG91ZGZsYXJlL2Rpc3QvYXBpL2NvbmZpZy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPLDJDQUEyQztBQUNsRCxZQUFZLG9IQUFvSDtBQUNoSTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixpQ0FBaUMsMEVBQWE7QUFDOUMsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1Asa0JBQWtCLGtDQUFrQztBQUNwRCIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFx6YWludWxhYWJhaWRpblxcRG93bmxvYWRzXFxGaW5hbFByb2plY3QtbWFpblxcRmluYWxQcm9qZWN0LW1haW5cXG5vZGVfbW9kdWxlc1xcQG9wZW5uZXh0anNcXGNsb3VkZmxhcmVcXGRpc3RcXGFwaVxcY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBhc3NldFJlc29sdmVyIGZyb20gXCIuL292ZXJyaWRlcy9hc3NldC1yZXNvbHZlci9pbmRleC5qc1wiO1xuLyoqXG4gKiBEZWZpbmVzIHRoZSBPcGVuTmV4dCBjb25maWd1cmF0aW9uIHRoYXQgdGFyZ2V0cyB0aGUgQ2xvdWRmbGFyZSBhZGFwdGVyXG4gKlxuICogQHBhcmFtIGNvbmZpZyBvcHRpb25zIHRoYXQgZW5hYmxlZCB5b3UgdG8gY29uZmlndXJlIHRoZSBhcHBsaWNhdGlvbidzIGJlaGF2aW9yXG4gKiBAcmV0dXJucyB0aGUgT3Blbk5leHQgY29uZmlndXJhdGlvbiBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUNsb3VkZmxhcmVDb25maWcoY29uZmlnID0ge30pIHtcbiAgICBjb25zdCB7IGluY3JlbWVudGFsQ2FjaGUsIHRhZ0NhY2hlLCBxdWV1ZSwgY2FjaGVQdXJnZSwgZW5hYmxlQ2FjaGVJbnRlcmNlcHRpb24gPSBmYWxzZSwgcm91dGVQcmVsb2FkaW5nQmVoYXZpb3IgPSBcIm5vbmVcIiwgfSA9IGNvbmZpZztcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBvdmVycmlkZToge1xuICAgICAgICAgICAgICAgIHdyYXBwZXI6IFwiY2xvdWRmbGFyZS1ub2RlXCIsXG4gICAgICAgICAgICAgICAgY29udmVydGVyOiBcImVkZ2VcIixcbiAgICAgICAgICAgICAgICBwcm94eUV4dGVybmFsUmVxdWVzdDogXCJmZXRjaFwiLFxuICAgICAgICAgICAgICAgIGluY3JlbWVudGFsQ2FjaGU6IHJlc29sdmVJbmNyZW1lbnRhbENhY2hlKGluY3JlbWVudGFsQ2FjaGUpLFxuICAgICAgICAgICAgICAgIHRhZ0NhY2hlOiByZXNvbHZlVGFnQ2FjaGUodGFnQ2FjaGUpLFxuICAgICAgICAgICAgICAgIHF1ZXVlOiByZXNvbHZlUXVldWUocXVldWUpLFxuICAgICAgICAgICAgICAgIGNkbkludmFsaWRhdGlvbjogcmVzb2x2ZUNkbkludmFsaWRhdGlvbihjYWNoZVB1cmdlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByb3V0ZVByZWxvYWRpbmdCZWhhdmlvcixcbiAgICAgICAgfSxcbiAgICAgICAgLy8gbm9kZTpjcnlwdG8gaXMgdXNlZCB0byBjb21wdXRlIGNhY2hlIGtleXNcbiAgICAgICAgZWRnZUV4dGVybmFsczogW1wibm9kZTpjcnlwdG9cIl0sXG4gICAgICAgIGNsb3VkZmxhcmU6IHtcbiAgICAgICAgICAgIHVzZVdvcmtlcmRDb25kaXRpb246IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIGRhbmdlcm91czoge1xuICAgICAgICAgICAgZW5hYmxlQ2FjaGVJbnRlcmNlcHRpb24sXG4gICAgICAgIH0sXG4gICAgICAgIG1pZGRsZXdhcmU6IHtcbiAgICAgICAgICAgIGV4dGVybmFsOiB0cnVlLFxuICAgICAgICAgICAgb3ZlcnJpZGU6IHtcbiAgICAgICAgICAgICAgICB3cmFwcGVyOiBcImNsb3VkZmxhcmUtZWRnZVwiLFxuICAgICAgICAgICAgICAgIGNvbnZlcnRlcjogXCJlZGdlXCIsXG4gICAgICAgICAgICAgICAgcHJveHlFeHRlcm5hbFJlcXVlc3Q6IFwiZmV0Y2hcIixcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRhbENhY2hlOiByZXNvbHZlSW5jcmVtZW50YWxDYWNoZShpbmNyZW1lbnRhbENhY2hlKSxcbiAgICAgICAgICAgICAgICB0YWdDYWNoZTogcmVzb2x2ZVRhZ0NhY2hlKHRhZ0NhY2hlKSxcbiAgICAgICAgICAgICAgICBxdWV1ZTogcmVzb2x2ZVF1ZXVlKHF1ZXVlKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhc3NldFJlc29sdmVyOiAoKSA9PiBhc3NldFJlc29sdmVyLFxuICAgICAgICB9LFxuICAgIH07XG59XG5mdW5jdGlvbiByZXNvbHZlSW5jcmVtZW50YWxDYWNoZSh2YWx1ZSA9IFwiZHVtbXlcIikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZSA6ICgpID0+IHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVRhZ0NhY2hlKHZhbHVlID0gXCJkdW1teVwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlIDogKCkgPT4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlUXVldWUodmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVDZG5JbnZhbGlkYXRpb24odmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbi8qKlxuICogQHBhcmFtIGJ1aWxkT3B0cyBidWlsZCBvcHRpb25zIGZyb20gQVdTXG4gKiBAcmV0dXJucyBUaGUgT3BlbkNvbmZpZyBzcGVjaWZpYyB0byBjbG91ZGZsYXJlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRPcGVuTmV4dENvbmZpZyhidWlsZE9wdHMpIHtcbiAgICByZXR1cm4gYnVpbGRPcHRzLmNvbmZpZztcbn1cbi8qKlxuICogQHJldHVybnMgVW5pcXVlIGRlcGxveW1lbnQgSURcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGxveW1lbnRJZCgpIHtcbiAgICByZXR1cm4gYGRwbC0ke25ldyBEYXRlKCkuZ2V0VGltZSgpLnRvU3RyaW5nKDM2KX1gO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/config.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.defineCloudflareConfig),\n/* harmony export */   getCloudflareContext: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext),\n/* harmony export */   getDeploymentId: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.getDeploymentId),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.initOpenNextCloudflareForDev)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloudflare-context.js */ \"(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/config.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ab3Blbm5leHRqcy9jbG91ZGZsYXJlL2Rpc3QvYXBpL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUF3QztBQUM4QiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFx6YWludWxhYWJhaWRpblxcRG93bmxvYWRzXFxGaW5hbFByb2plY3QtbWFpblxcRmluYWxQcm9qZWN0LW1haW5cXG5vZGVfbW9kdWxlc1xcQG9wZW5uZXh0anNcXGNsb3VkZmxhcmVcXGRpc3RcXGFwaVxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0ICogZnJvbSBcIi4vY2xvdWRmbGFyZS1jb250ZXh0LmpzXCI7XG5leHBvcnQgeyBkZWZpbmVDbG91ZGZsYXJlQ29uZmlnLCBnZXREZXBsb3ltZW50SWQgfSBmcm9tIFwiLi9jb25maWcuanNcIjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/index.js\n");

/***/ }),

/***/ "(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isUserWorkerFirst: () => (/* binding */ isUserWorkerFirst)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cloudflare-context.js */ \"(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n\n/**\n * Serves assets when `run_worker_first` is set to true.\n *\n * When `run_worker_first` is `false`, the assets are served directly bypassing Next routing.\n *\n * When it is `true`, assets are served from the routing layer. It should be used when assets\n * should be behind the middleware or when skew protection is enabled.\n *\n * See https://developers.cloudflare.com/workers/static-assets/binding/#run_worker_first\n */\nconst resolver = {\n    name: \"cloudflare-asset-resolver\",\n    async maybeGetAssetResult(event) {\n        const { ASSETS } = (0,_cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext)().env;\n        if (!ASSETS || !isUserWorkerFirst(globalThis.__ASSETS_RUN_WORKER_FIRST__, event.rawPath)) {\n            // Only handle assets when the user worker runs first for the path\n            return undefined;\n        }\n        const { method, headers } = event;\n        if (method !== \"GET\" && method != \"HEAD\") {\n            return undefined;\n        }\n        const url = new URL(event.rawPath, \"https://assets.local\");\n        const response = await ASSETS.fetch(url, {\n            headers,\n            method,\n        });\n        if (response.status === 404) {\n            await response.body?.cancel();\n            return undefined;\n        }\n        return {\n            type: \"core\",\n            statusCode: response.status,\n            headers: Object.fromEntries(response.headers.entries()),\n            // Workers and Node types differ.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            body: response.body || new ReadableStream(),\n            isBase64Encoded: false,\n        };\n    },\n};\n/**\n * @param runWorkerFirst `run_worker_first` config\n * @param pathname pathname of the request\n * @returns Whether the user worker runs first\n */\nfunction isUserWorkerFirst(runWorkerFirst, pathname) {\n    if (!Array.isArray(runWorkerFirst)) {\n        return runWorkerFirst ?? false;\n    }\n    let hasPositiveMatch = false;\n    for (let rule of runWorkerFirst) {\n        let isPositiveRule = true;\n        if (rule.startsWith(\"!\")) {\n            rule = rule.slice(1);\n            isPositiveRule = false;\n        }\n        else if (hasPositiveMatch) {\n            // Do not look for more positive rules once we have a match\n            continue;\n        }\n        // - Escapes special characters\n        // - Replaces * with .*\n        const match = new RegExp(`^${rule.replace(/([[\\]().*+?^$|{}\\\\])/g, \"\\\\$1\").replace(\"\\\\*\", \".*\")}$`).test(pathname);\n        if (match) {\n            if (isPositiveRule) {\n                hasPositiveMatch = true;\n            }\n            else {\n                // Exit early when there is a negative match\n                return false;\n            }\n        }\n    }\n    return hasPositiveMatch;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (resolver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFjdGlvbi1icm93c2VyKS8uL25vZGVfbW9kdWxlcy9Ab3Blbm5leHRqcy9jbG91ZGZsYXJlL2Rpc3QvYXBpL292ZXJyaWRlcy9hc3NldC1yZXNvbHZlci9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBbUU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUyxFQUFFLDRFQUFvQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixrQkFBa0I7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyw4QkFBOEIscUNBQXFDO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLFFBQVEsRUFBQyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFx6YWludWxhYWJhaWRpblxcRG93bmxvYWRzXFxGaW5hbFByb2plY3QtbWFpblxcRmluYWxQcm9qZWN0LW1haW5cXG5vZGVfbW9kdWxlc1xcQG9wZW5uZXh0anNcXGNsb3VkZmxhcmVcXGRpc3RcXGFwaVxcb3ZlcnJpZGVzXFxhc3NldC1yZXNvbHZlclxcaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0Q2xvdWRmbGFyZUNvbnRleHQgfSBmcm9tIFwiLi4vLi4vY2xvdWRmbGFyZS1jb250ZXh0LmpzXCI7XG4vKipcbiAqIFNlcnZlcyBhc3NldHMgd2hlbiBgcnVuX3dvcmtlcl9maXJzdGAgaXMgc2V0IHRvIHRydWUuXG4gKlxuICogV2hlbiBgcnVuX3dvcmtlcl9maXJzdGAgaXMgYGZhbHNlYCwgdGhlIGFzc2V0cyBhcmUgc2VydmVkIGRpcmVjdGx5IGJ5cGFzc2luZyBOZXh0IHJvdXRpbmcuXG4gKlxuICogV2hlbiBpdCBpcyBgdHJ1ZWAsIGFzc2V0cyBhcmUgc2VydmVkIGZyb20gdGhlIHJvdXRpbmcgbGF5ZXIuIEl0IHNob3VsZCBiZSB1c2VkIHdoZW4gYXNzZXRzXG4gKiBzaG91bGQgYmUgYmVoaW5kIHRoZSBtaWRkbGV3YXJlIG9yIHdoZW4gc2tldyBwcm90ZWN0aW9uIGlzIGVuYWJsZWQuXG4gKlxuICogU2VlIGh0dHBzOi8vZGV2ZWxvcGVycy5jbG91ZGZsYXJlLmNvbS93b3JrZXJzL3N0YXRpYy1hc3NldHMvYmluZGluZy8jcnVuX3dvcmtlcl9maXJzdFxuICovXG5jb25zdCByZXNvbHZlciA9IHtcbiAgICBuYW1lOiBcImNsb3VkZmxhcmUtYXNzZXQtcmVzb2x2ZXJcIixcbiAgICBhc3luYyBtYXliZUdldEFzc2V0UmVzdWx0KGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHsgQVNTRVRTIH0gPSBnZXRDbG91ZGZsYXJlQ29udGV4dCgpLmVudjtcbiAgICAgICAgaWYgKCFBU1NFVFMgfHwgIWlzVXNlcldvcmtlckZpcnN0KGdsb2JhbFRoaXMuX19BU1NFVFNfUlVOX1dPUktFUl9GSVJTVF9fLCBldmVudC5yYXdQYXRoKSkge1xuICAgICAgICAgICAgLy8gT25seSBoYW5kbGUgYXNzZXRzIHdoZW4gdGhlIHVzZXIgd29ya2VyIHJ1bnMgZmlyc3QgZm9yIHRoZSBwYXRoXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kLCBoZWFkZXJzIH0gPSBldmVudDtcbiAgICAgICAgaWYgKG1ldGhvZCAhPT0gXCJHRVRcIiAmJiBtZXRob2QgIT0gXCJIRUFEXCIpIHtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChldmVudC5yYXdQYXRoLCBcImh0dHBzOi8vYXNzZXRzLmxvY2FsXCIpO1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IEFTU0VUUy5mZXRjaCh1cmwsIHtcbiAgICAgICAgICAgIGhlYWRlcnMsXG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDQpIHtcbiAgICAgICAgICAgIGF3YWl0IHJlc3BvbnNlLmJvZHk/LmNhbmNlbCgpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogXCJjb3JlXCIsXG4gICAgICAgICAgICBzdGF0dXNDb2RlOiByZXNwb25zZS5zdGF0dXMsXG4gICAgICAgICAgICBoZWFkZXJzOiBPYmplY3QuZnJvbUVudHJpZXMocmVzcG9uc2UuaGVhZGVycy5lbnRyaWVzKCkpLFxuICAgICAgICAgICAgLy8gV29ya2VycyBhbmQgTm9kZSB0eXBlcyBkaWZmZXIuXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICAgICAgYm9keTogcmVzcG9uc2UuYm9keSB8fCBuZXcgUmVhZGFibGVTdHJlYW0oKSxcbiAgICAgICAgICAgIGlzQmFzZTY0RW5jb2RlZDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfSxcbn07XG4vKipcbiAqIEBwYXJhbSBydW5Xb3JrZXJGaXJzdCBgcnVuX3dvcmtlcl9maXJzdGAgY29uZmlnXG4gKiBAcGFyYW0gcGF0aG5hbWUgcGF0aG5hbWUgb2YgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIFdoZXRoZXIgdGhlIHVzZXIgd29ya2VyIHJ1bnMgZmlyc3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzVXNlcldvcmtlckZpcnN0KHJ1bldvcmtlckZpcnN0LCBwYXRobmFtZSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShydW5Xb3JrZXJGaXJzdCkpIHtcbiAgICAgICAgcmV0dXJuIHJ1bldvcmtlckZpcnN0ID8/IGZhbHNlO1xuICAgIH1cbiAgICBsZXQgaGFzUG9zaXRpdmVNYXRjaCA9IGZhbHNlO1xuICAgIGZvciAobGV0IHJ1bGUgb2YgcnVuV29ya2VyRmlyc3QpIHtcbiAgICAgICAgbGV0IGlzUG9zaXRpdmVSdWxlID0gdHJ1ZTtcbiAgICAgICAgaWYgKHJ1bGUuc3RhcnRzV2l0aChcIiFcIikpIHtcbiAgICAgICAgICAgIHJ1bGUgPSBydWxlLnNsaWNlKDEpO1xuICAgICAgICAgICAgaXNQb3NpdGl2ZVJ1bGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChoYXNQb3NpdGl2ZU1hdGNoKSB7XG4gICAgICAgICAgICAvLyBEbyBub3QgbG9vayBmb3IgbW9yZSBwb3NpdGl2ZSBydWxlcyBvbmNlIHdlIGhhdmUgYSBtYXRjaFxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gLSBFc2NhcGVzIHNwZWNpYWwgY2hhcmFjdGVyc1xuICAgICAgICAvLyAtIFJlcGxhY2VzICogd2l0aCAuKlxuICAgICAgICBjb25zdCBtYXRjaCA9IG5ldyBSZWdFeHAoYF4ke3J1bGUucmVwbGFjZSgvKFtbXFxdKCkuKis/XiR8e31cXFxcXSkvZywgXCJcXFxcJDFcIikucmVwbGFjZShcIlxcXFwqXCIsIFwiLipcIil9JGApLnRlc3QocGF0aG5hbWUpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIGlmIChpc1Bvc2l0aXZlUnVsZSkge1xuICAgICAgICAgICAgICAgIGhhc1Bvc2l0aXZlTWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRXhpdCBlYXJseSB3aGVuIHRoZXJlIGlzIGEgbmVnYXRpdmUgbWF0Y2hcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGhhc1Bvc2l0aXZlTWF0Y2g7XG59XG5leHBvcnQgZGVmYXVsdCByZXNvbHZlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCloudflareContext: () => (/* binding */ getCloudflareContext),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* binding */ initOpenNextCloudflareForDev)\n/* harmony export */ });\n/**\n * Symbol used as an index in the global scope to set and retrieve the Cloudflare context\n *\n * This is used both in production (in the actual built worker) and in development (`next dev`)\n *\n * Note: this symbol needs to be kept in sync with the one used in `src/cli/templates/worker.ts`\n */\nconst cloudflareContextSymbol = Symbol.for(\"__cloudflare-context__\");\nfunction getCloudflareContext(options = { async: false }) {\n    return options.async ? getCloudflareContextAsync() : getCloudflareContextSync();\n}\n/**\n * Get the cloudflare context from the current global scope\n */\nfunction getCloudflareContextFromGlobalScope() {\n    const global = globalThis;\n    return global[cloudflareContextSymbol];\n}\n/**\n * Detects whether the current code is being evaluated in a statically generated route\n */\nfunction inSSG() {\n    const global = globalThis;\n    // Note: Next.js sets globalThis.__NEXT_DATA__.nextExport to true for SSG routes\n    // source: https://github.com/vercel/next.js/blob/4e394608423/packages/next/src/export/worker.ts#L55-L57)\n    return global.__NEXT_DATA__?.nextExport === true;\n}\n/**\n * Utility to get the current Cloudflare context in sync mode\n */\nfunction getCloudflareContextSync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // The sync mode of `getCloudflareContext`, relies on the context being set on the global state\n    // by either the worker entrypoint (in prod) or by `initOpenNextCloudflareForDev` (in dev), neither\n    // can work during SSG since for SSG Next.js creates (jest) workers that don't get access to the\n    // normal global state so we throw with a helpful error message.\n    if (inSSG()) {\n        throw new Error(`\\n\\nERROR: \\`getCloudflareContext\\` has been called in sync mode in either a static route or at the top level of a non-static one,` +\n            ` both cases are not allowed but can be solved by either:\\n` +\n            `  - make sure that the call is not at the top level and that the route is not static\\n` +\n            `  - call \\`getCloudflareContext({async: true})\\` to use the \\`async\\` mode\\n` +\n            `  - avoid calling \\`getCloudflareContext\\` in the route\\n`);\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Utility to get the current Cloudflare context in async mode\n */\nasync function getCloudflareContextAsync() {\n    const cloudflareContext = getCloudflareContextFromGlobalScope();\n    if (cloudflareContext) {\n        return cloudflareContext;\n    }\n    // Note: Next.js sets process.env.NEXT_RUNTIME to 'nodejs' when the runtime in use is the node.js one\n    // We want to detect when the runtime is the node.js one so that during development (`next dev`) we know wether\n    // we are or not in a node.js process and that access to wrangler's node.js apis\n    const inNodejsRuntime = \"nodejs\" === \"nodejs\";\n    if (inNodejsRuntime || inSSG()) {\n        // we're in a node.js process and also in \"async mode\" so we can use wrangler to asynchronously get the context\n        const cloudflareContext = await getCloudflareContextFromWrangler();\n        addCloudflareContextToNodejsGlobal(cloudflareContext);\n        return cloudflareContext;\n    }\n    throw new Error(initOpenNextCloudflareForDevErrorMsg);\n}\n/**\n * Performs some initial setup to integrate as best as possible the local Next.js dev server (run via `next dev`)\n * with the open-next Cloudflare adapter\n *\n * Note: this function should only be called inside the Next.js config file, and although async it doesn't need to be `await`ed\n * @param options options on how the function should operate and if/where to persist the platform data\n */\nasync function initOpenNextCloudflareForDev(options) {\n    const shouldInitializationRun = shouldContextInitializationRun();\n    if (!shouldInitializationRun)\n        return;\n    if (options?.environment && process.env.NEXT_DEV_WRANGLER_ENV) {\n        console.warn(`'initOpenNextCloudflareForDev' has been called with an environment option while NEXT_DEV_WRANGLER_ENV is set.` +\n            ` NEXT_DEV_WRANGLER_ENV will be ignored and the environment will be set to: '${options.environment}'`);\n    }\n    const context = await getCloudflareContextFromWrangler(options);\n    addCloudflareContextToNodejsGlobal(context);\n    await monkeyPatchVmModuleEdgeContext(context);\n}\n/**\n * Next dev server imports the config file twice (in two different processes, making it hard to track),\n * this causes the initialization to run twice as well, to keep things clean, not allocate extra\n * resources (i.e. instantiate two miniflare instances) and avoid extra potential logs, it would be best\n * to run the initialization only once, this function is used to try to make it so that it does, it returns\n * a flag which indicates if the initialization should run in the current process or not.\n *\n * @returns boolean indicating if the initialization should run\n */\nfunction shouldContextInitializationRun() {\n    // via debugging we've seen that AsyncLocalStorage is only set in one of the\n    // two processes so we're using it as the differentiator between the two\n    const AsyncLocalStorage = globalThis[\"AsyncLocalStorage\"];\n    return !!AsyncLocalStorage;\n}\n/**\n * Adds the cloudflare context to the global scope of the current node.js process, enabling\n * future calls to `getCloudflareContext` to retrieve and return such context\n *\n * @param cloudflareContext the cloudflare context to add to the node.sj global scope\n */\nfunction addCloudflareContextToNodejsGlobal(cloudflareContext) {\n    const global = globalThis;\n    global[cloudflareContextSymbol] = cloudflareContext;\n}\n/**\n * Next.js uses the Node.js vm module's `runInContext()` function to evaluate edge functions\n * in a runtime context that tries to simulate as accurately as possible the actual production runtime\n * behavior, see: https://github.com/vercel/next.js/blob/9a1cd3/packages/next/src/server/web/sandbox/context.ts#L525-L527\n *\n * This function monkey-patches the Node.js `vm` module to override the `runInContext()` function so that the\n * cloudflare context is added to the runtime context's global scope before edge functions are evaluated\n *\n * @param cloudflareContext the cloudflare context to patch onto the \"edge\" runtime context global scope\n */\nasync function monkeyPatchVmModuleEdgeContext(cloudflareContext) {\n    const require = (await import(/* webpackIgnore: true */ `${\"__module\".replaceAll(\"_\", \"\")}`)).default.createRequire(\"file:///C:/Users/zainulaabaidin/Downloads/FinalProject-main/FinalProject-main/node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n    // eslint-disable-next-line unicorn/prefer-node-protocol -- the `next dev` compiler doesn't accept the node prefix\n    const vmModule = require(\"vm\");\n    const originalRunInContext = vmModule.runInContext.bind(vmModule);\n    vmModule.runInContext = (code, contextifiedObject, options) => {\n        const runtimeContext = contextifiedObject;\n        runtimeContext[cloudflareContextSymbol] ??= cloudflareContext;\n        return originalRunInContext(code, contextifiedObject, options);\n    };\n}\n/**\n * Gets a cloudflare context object from wrangler\n *\n * @returns the cloudflare context ready for use\n */\nasync function getCloudflareContextFromWrangler(options) {\n    // Note: we never want wrangler to be bundled in the Next.js app, that's why the import below looks like it does\n    const { getPlatformProxy } = await import(/* webpackIgnore: true */ `${\"__wrangler\".replaceAll(\"_\", \"\")}`);\n    // This allows the selection of a wrangler environment while running in next dev mode\n    const environment = options?.environment ?? process.env.NEXT_DEV_WRANGLER_ENV;\n    const { env, cf, ctx } = await getPlatformProxy({\n        ...options,\n        environment,\n    });\n    return {\n        env,\n        cf: cf,\n        ctx: ctx,\n    };\n}\n// In production the cloudflare context is initialized by the worker so it is always available.\n// During local development (`next dev`) it might be missing only if the developers hasn't called\n// the `initOpenNextCloudflareForDev` function in their Next.js config file\nconst initOpenNextCloudflareForDevErrorMsg = `\\n\\nERROR: \\`getCloudflareContext\\` has been called without having called` +\n    ` \\`initOpenNextCloudflareForDev\\` from the Next.js config file.\\n` +\n    `You should update your Next.js config file as shown below:\\n\\n` +\n    \"   ```\\n   // next.config.mjs\\n\\n\" +\n    `   import { initOpenNextCloudflareForDev } from \"@opennextjs/cloudflare\";\\n\\n` +\n    `   initOpenNextCloudflareForDev();\\n\\n` +\n    \"   const nextConfig = { ... };\\n\" +\n    \"   export default nextConfig;\\n\" +\n    \"   ```\\n\" +\n    \"\\n\";\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/config.js":
/*!****************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/config.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* binding */ defineCloudflareConfig),\n/* harmony export */   getDeploymentId: () => (/* binding */ getDeploymentId),\n/* harmony export */   getOpenNextConfig: () => (/* binding */ getOpenNextConfig)\n/* harmony export */ });\n/* harmony import */ var _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./overrides/asset-resolver/index.js */ \"(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\");\n\n/**\n * Defines the OpenNext configuration that targets the Cloudflare adapter\n *\n * @param config options that enabled you to configure the application's behavior\n * @returns the OpenNext configuration object\n */\nfunction defineCloudflareConfig(config = {}) {\n    const { incrementalCache, tagCache, queue, cachePurge, enableCacheInterception = false, routePreloadingBehavior = \"none\", } = config;\n    return {\n        default: {\n            override: {\n                wrapper: \"cloudflare-node\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n                cdnInvalidation: resolveCdnInvalidation(cachePurge),\n            },\n            routePreloadingBehavior,\n        },\n        // node:crypto is used to compute cache keys\n        edgeExternals: [\"node:crypto\"],\n        cloudflare: {\n            useWorkerdCondition: true,\n        },\n        dangerous: {\n            enableCacheInterception,\n        },\n        middleware: {\n            external: true,\n            override: {\n                wrapper: \"cloudflare-edge\",\n                converter: \"edge\",\n                proxyExternalRequest: \"fetch\",\n                incrementalCache: resolveIncrementalCache(incrementalCache),\n                tagCache: resolveTagCache(tagCache),\n                queue: resolveQueue(queue),\n            },\n            assetResolver: () => _overrides_asset_resolver_index_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n        },\n    };\n}\nfunction resolveIncrementalCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveTagCache(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveQueue(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\nfunction resolveCdnInvalidation(value = \"dummy\") {\n    if (typeof value === \"string\") {\n        return value;\n    }\n    return typeof value === \"function\" ? value : () => value;\n}\n/**\n * @param buildOpts build options from AWS\n * @returns The OpenConfig specific to cloudflare\n */\nfunction getOpenNextConfig(buildOpts) {\n    return buildOpts.config;\n}\n/**\n * @returns Unique deployment ID\n */\nfunction getDeploymentId() {\n    return `dpl-${new Date().getTime().toString(36)}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywyQ0FBMkM7QUFDbEQsWUFBWSxvSEFBb0g7QUFDaEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsaUNBQWlDLDBFQUFhO0FBQzlDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLGtCQUFrQixrQ0FBa0M7QUFDcEQiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcemFpbnVsYWFiYWlkaW5cXERvd25sb2Fkc1xcRmluYWxQcm9qZWN0LW1haW5cXEZpbmFsUHJvamVjdC1tYWluXFxub2RlX21vZHVsZXNcXEBvcGVubmV4dGpzXFxjbG91ZGZsYXJlXFxkaXN0XFxhcGlcXGNvbmZpZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXNzZXRSZXNvbHZlciBmcm9tIFwiLi9vdmVycmlkZXMvYXNzZXQtcmVzb2x2ZXIvaW5kZXguanNcIjtcbi8qKlxuICogRGVmaW5lcyB0aGUgT3Blbk5leHQgY29uZmlndXJhdGlvbiB0aGF0IHRhcmdldHMgdGhlIENsb3VkZmxhcmUgYWRhcHRlclxuICpcbiAqIEBwYXJhbSBjb25maWcgb3B0aW9ucyB0aGF0IGVuYWJsZWQgeW91IHRvIGNvbmZpZ3VyZSB0aGUgYXBwbGljYXRpb24ncyBiZWhhdmlvclxuICogQHJldHVybnMgdGhlIE9wZW5OZXh0IGNvbmZpZ3VyYXRpb24gb2JqZWN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWZpbmVDbG91ZGZsYXJlQ29uZmlnKGNvbmZpZyA9IHt9KSB7XG4gICAgY29uc3QgeyBpbmNyZW1lbnRhbENhY2hlLCB0YWdDYWNoZSwgcXVldWUsIGNhY2hlUHVyZ2UsIGVuYWJsZUNhY2hlSW50ZXJjZXB0aW9uID0gZmFsc2UsIHJvdXRlUHJlbG9hZGluZ0JlaGF2aW9yID0gXCJub25lXCIsIH0gPSBjb25maWc7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgb3ZlcnJpZGU6IHtcbiAgICAgICAgICAgICAgICB3cmFwcGVyOiBcImNsb3VkZmxhcmUtbm9kZVwiLFxuICAgICAgICAgICAgICAgIGNvbnZlcnRlcjogXCJlZGdlXCIsXG4gICAgICAgICAgICAgICAgcHJveHlFeHRlcm5hbFJlcXVlc3Q6IFwiZmV0Y2hcIixcbiAgICAgICAgICAgICAgICBpbmNyZW1lbnRhbENhY2hlOiByZXNvbHZlSW5jcmVtZW50YWxDYWNoZShpbmNyZW1lbnRhbENhY2hlKSxcbiAgICAgICAgICAgICAgICB0YWdDYWNoZTogcmVzb2x2ZVRhZ0NhY2hlKHRhZ0NhY2hlKSxcbiAgICAgICAgICAgICAgICBxdWV1ZTogcmVzb2x2ZVF1ZXVlKHF1ZXVlKSxcbiAgICAgICAgICAgICAgICBjZG5JbnZhbGlkYXRpb246IHJlc29sdmVDZG5JbnZhbGlkYXRpb24oY2FjaGVQdXJnZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcm91dGVQcmVsb2FkaW5nQmVoYXZpb3IsXG4gICAgICAgIH0sXG4gICAgICAgIC8vIG5vZGU6Y3J5cHRvIGlzIHVzZWQgdG8gY29tcHV0ZSBjYWNoZSBrZXlzXG4gICAgICAgIGVkZ2VFeHRlcm5hbHM6IFtcIm5vZGU6Y3J5cHRvXCJdLFxuICAgICAgICBjbG91ZGZsYXJlOiB7XG4gICAgICAgICAgICB1c2VXb3JrZXJkQ29uZGl0aW9uOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgICBkYW5nZXJvdXM6IHtcbiAgICAgICAgICAgIGVuYWJsZUNhY2hlSW50ZXJjZXB0aW9uLFxuICAgICAgICB9LFxuICAgICAgICBtaWRkbGV3YXJlOiB7XG4gICAgICAgICAgICBleHRlcm5hbDogdHJ1ZSxcbiAgICAgICAgICAgIG92ZXJyaWRlOiB7XG4gICAgICAgICAgICAgICAgd3JhcHBlcjogXCJjbG91ZGZsYXJlLWVkZ2VcIixcbiAgICAgICAgICAgICAgICBjb252ZXJ0ZXI6IFwiZWRnZVwiLFxuICAgICAgICAgICAgICAgIHByb3h5RXh0ZXJuYWxSZXF1ZXN0OiBcImZldGNoXCIsXG4gICAgICAgICAgICAgICAgaW5jcmVtZW50YWxDYWNoZTogcmVzb2x2ZUluY3JlbWVudGFsQ2FjaGUoaW5jcmVtZW50YWxDYWNoZSksXG4gICAgICAgICAgICAgICAgdGFnQ2FjaGU6IHJlc29sdmVUYWdDYWNoZSh0YWdDYWNoZSksXG4gICAgICAgICAgICAgICAgcXVldWU6IHJlc29sdmVRdWV1ZShxdWV1ZSksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYXNzZXRSZXNvbHZlcjogKCkgPT4gYXNzZXRSZXNvbHZlcixcbiAgICAgICAgfSxcbiAgICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZUluY3JlbWVudGFsQ2FjaGUodmFsdWUgPSBcImR1bW15XCIpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiID8gdmFsdWUgOiAoKSA9PiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVUYWdDYWNoZSh2YWx1ZSA9IFwiZHVtbXlcIikge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgPyB2YWx1ZSA6ICgpID0+IHZhbHVlO1xufVxuZnVuY3Rpb24gcmVzb2x2ZVF1ZXVlKHZhbHVlID0gXCJkdW1teVwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlIDogKCkgPT4gdmFsdWU7XG59XG5mdW5jdGlvbiByZXNvbHZlQ2RuSW52YWxpZGF0aW9uKHZhbHVlID0gXCJkdW1teVwiKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiA/IHZhbHVlIDogKCkgPT4gdmFsdWU7XG59XG4vKipcbiAqIEBwYXJhbSBidWlsZE9wdHMgYnVpbGQgb3B0aW9ucyBmcm9tIEFXU1xuICogQHJldHVybnMgVGhlIE9wZW5Db25maWcgc3BlY2lmaWMgdG8gY2xvdWRmbGFyZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3Blbk5leHRDb25maWcoYnVpbGRPcHRzKSB7XG4gICAgcmV0dXJuIGJ1aWxkT3B0cy5jb25maWc7XG59XG4vKipcbiAqIEByZXR1cm5zIFVuaXF1ZSBkZXBsb3ltZW50IElEXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXBsb3ltZW50SWQoKSB7XG4gICAgcmV0dXJuIGBkcGwtJHtuZXcgRGF0ZSgpLmdldFRpbWUoKS50b1N0cmluZygzNil9YDtcbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/config.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defineCloudflareConfig: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.defineCloudflareConfig),\n/* harmony export */   getCloudflareContext: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext),\n/* harmony export */   getDeploymentId: () => (/* reexport safe */ _config_js__WEBPACK_IMPORTED_MODULE_1__.getDeploymentId),\n/* harmony export */   initOpenNextCloudflareForDev: () => (/* reexport safe */ _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.initOpenNextCloudflareForDev)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cloudflare-context.js */ \"(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n/* harmony import */ var _config_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./config.js */ \"(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/config.js\");\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBd0M7QUFDOEIiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcemFpbnVsYWFiYWlkaW5cXERvd25sb2Fkc1xcRmluYWxQcm9qZWN0LW1haW5cXEZpbmFsUHJvamVjdC1tYWluXFxub2RlX21vZHVsZXNcXEBvcGVubmV4dGpzXFxjbG91ZGZsYXJlXFxkaXN0XFxhcGlcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCAqIGZyb20gXCIuL2Nsb3VkZmxhcmUtY29udGV4dC5qc1wiO1xuZXhwb3J0IHsgZGVmaW5lQ2xvdWRmbGFyZUNvbmZpZywgZ2V0RGVwbG95bWVudElkIH0gZnJvbSBcIi4vY29uZmlnLmpzXCI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   isUserWorkerFirst: () => (/* binding */ isUserWorkerFirst)\n/* harmony export */ });\n/* harmony import */ var _cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cloudflare-context.js */ \"(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/cloudflare-context.js\");\n\n/**\n * Serves assets when `run_worker_first` is set to true.\n *\n * When `run_worker_first` is `false`, the assets are served directly bypassing Next routing.\n *\n * When it is `true`, assets are served from the routing layer. It should be used when assets\n * should be behind the middleware or when skew protection is enabled.\n *\n * See https://developers.cloudflare.com/workers/static-assets/binding/#run_worker_first\n */\nconst resolver = {\n    name: \"cloudflare-asset-resolver\",\n    async maybeGetAssetResult(event) {\n        const { ASSETS } = (0,_cloudflare_context_js__WEBPACK_IMPORTED_MODULE_0__.getCloudflareContext)().env;\n        if (!ASSETS || !isUserWorkerFirst(globalThis.__ASSETS_RUN_WORKER_FIRST__, event.rawPath)) {\n            // Only handle assets when the user worker runs first for the path\n            return undefined;\n        }\n        const { method, headers } = event;\n        if (method !== \"GET\" && method != \"HEAD\") {\n            return undefined;\n        }\n        const url = new URL(event.rawPath, \"https://assets.local\");\n        const response = await ASSETS.fetch(url, {\n            headers,\n            method,\n        });\n        if (response.status === 404) {\n            await response.body?.cancel();\n            return undefined;\n        }\n        return {\n            type: \"core\",\n            statusCode: response.status,\n            headers: Object.fromEntries(response.headers.entries()),\n            // Workers and Node types differ.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            body: response.body || new ReadableStream(),\n            isBase64Encoded: false,\n        };\n    },\n};\n/**\n * @param runWorkerFirst `run_worker_first` config\n * @param pathname pathname of the request\n * @returns Whether the user worker runs first\n */\nfunction isUserWorkerFirst(runWorkerFirst, pathname) {\n    if (!Array.isArray(runWorkerFirst)) {\n        return runWorkerFirst ?? false;\n    }\n    let hasPositiveMatch = false;\n    for (let rule of runWorkerFirst) {\n        let isPositiveRule = true;\n        if (rule.startsWith(\"!\")) {\n            rule = rule.slice(1);\n            isPositiveRule = false;\n        }\n        else if (hasPositiveMatch) {\n            // Do not look for more positive rules once we have a match\n            continue;\n        }\n        // - Escapes special characters\n        // - Replaces * with .*\n        const match = new RegExp(`^${rule.replace(/([[\\]().*+?^$|{}\\\\])/g, \"\\\\$1\").replace(\"\\\\*\", \".*\")}$`).test(pathname);\n        if (match) {\n            if (isPositiveRule) {\n                hasPositiveMatch = true;\n            }\n            else {\n                // Exit early when there is a negative match\n                return false;\n            }\n        }\n    }\n    return hasPositiveMatch;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (resolver);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQG9wZW5uZXh0anMvY2xvdWRmbGFyZS9kaXN0L2FwaS9vdmVycmlkZXMvYXNzZXQtcmVzb2x2ZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQW1FO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVMsRUFBRSw0RUFBb0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isa0JBQWtCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsOEJBQThCLHFDQUFxQztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBZSxRQUFRLEVBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcemFpbnVsYWFiYWlkaW5cXERvd25sb2Fkc1xcRmluYWxQcm9qZWN0LW1haW5cXEZpbmFsUHJvamVjdC1tYWluXFxub2RlX21vZHVsZXNcXEBvcGVubmV4dGpzXFxjbG91ZGZsYXJlXFxkaXN0XFxhcGlcXG92ZXJyaWRlc1xcYXNzZXQtcmVzb2x2ZXJcXGluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldENsb3VkZmxhcmVDb250ZXh0IH0gZnJvbSBcIi4uLy4uL2Nsb3VkZmxhcmUtY29udGV4dC5qc1wiO1xuLyoqXG4gKiBTZXJ2ZXMgYXNzZXRzIHdoZW4gYHJ1bl93b3JrZXJfZmlyc3RgIGlzIHNldCB0byB0cnVlLlxuICpcbiAqIFdoZW4gYHJ1bl93b3JrZXJfZmlyc3RgIGlzIGBmYWxzZWAsIHRoZSBhc3NldHMgYXJlIHNlcnZlZCBkaXJlY3RseSBieXBhc3NpbmcgTmV4dCByb3V0aW5nLlxuICpcbiAqIFdoZW4gaXQgaXMgYHRydWVgLCBhc3NldHMgYXJlIHNlcnZlZCBmcm9tIHRoZSByb3V0aW5nIGxheWVyLiBJdCBzaG91bGQgYmUgdXNlZCB3aGVuIGFzc2V0c1xuICogc2hvdWxkIGJlIGJlaGluZCB0aGUgbWlkZGxld2FyZSBvciB3aGVuIHNrZXcgcHJvdGVjdGlvbiBpcyBlbmFibGVkLlxuICpcbiAqIFNlZSBodHRwczovL2RldmVsb3BlcnMuY2xvdWRmbGFyZS5jb20vd29ya2Vycy9zdGF0aWMtYXNzZXRzL2JpbmRpbmcvI3J1bl93b3JrZXJfZmlyc3RcbiAqL1xuY29uc3QgcmVzb2x2ZXIgPSB7XG4gICAgbmFtZTogXCJjbG91ZGZsYXJlLWFzc2V0LXJlc29sdmVyXCIsXG4gICAgYXN5bmMgbWF5YmVHZXRBc3NldFJlc3VsdChldmVudCkge1xuICAgICAgICBjb25zdCB7IEFTU0VUUyB9ID0gZ2V0Q2xvdWRmbGFyZUNvbnRleHQoKS5lbnY7XG4gICAgICAgIGlmICghQVNTRVRTIHx8ICFpc1VzZXJXb3JrZXJGaXJzdChnbG9iYWxUaGlzLl9fQVNTRVRTX1JVTl9XT1JLRVJfRklSU1RfXywgZXZlbnQucmF3UGF0aCkpIHtcbiAgICAgICAgICAgIC8vIE9ubHkgaGFuZGxlIGFzc2V0cyB3aGVuIHRoZSB1c2VyIHdvcmtlciBydW5zIGZpcnN0IGZvciB0aGUgcGF0aFxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG1ldGhvZCwgaGVhZGVycyB9ID0gZXZlbnQ7XG4gICAgICAgIGlmIChtZXRob2QgIT09IFwiR0VUXCIgJiYgbWV0aG9kICE9IFwiSEVBRFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoZXZlbnQucmF3UGF0aCwgXCJodHRwczovL2Fzc2V0cy5sb2NhbFwiKTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBBU1NFVFMuZmV0Y2godXJsLCB7XG4gICAgICAgICAgICBoZWFkZXJzLFxuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgICAgICBhd2FpdCByZXNwb25zZS5ib2R5Py5jYW5jZWwoKTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6IFwiY29yZVwiLFxuICAgICAgICAgICAgc3RhdHVzQ29kZTogcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgICAgICAgaGVhZGVyczogT2JqZWN0LmZyb21FbnRyaWVzKHJlc3BvbnNlLmhlYWRlcnMuZW50cmllcygpKSxcbiAgICAgICAgICAgIC8vIFdvcmtlcnMgYW5kIE5vZGUgdHlwZXMgZGlmZmVyLlxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICAgICAgICAgIGJvZHk6IHJlc3BvbnNlLmJvZHkgfHwgbmV3IFJlYWRhYmxlU3RyZWFtKCksXG4gICAgICAgICAgICBpc0Jhc2U2NEVuY29kZWQ6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH0sXG59O1xuLyoqXG4gKiBAcGFyYW0gcnVuV29ya2VyRmlyc3QgYHJ1bl93b3JrZXJfZmlyc3RgIGNvbmZpZ1xuICogQHBhcmFtIHBhdGhuYW1lIHBhdGhuYW1lIG9mIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyBXaGV0aGVyIHRoZSB1c2VyIHdvcmtlciBydW5zIGZpcnN0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1VzZXJXb3JrZXJGaXJzdChydW5Xb3JrZXJGaXJzdCwgcGF0aG5hbWUpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkocnVuV29ya2VyRmlyc3QpKSB7XG4gICAgICAgIHJldHVybiBydW5Xb3JrZXJGaXJzdCA/PyBmYWxzZTtcbiAgICB9XG4gICAgbGV0IGhhc1Bvc2l0aXZlTWF0Y2ggPSBmYWxzZTtcbiAgICBmb3IgKGxldCBydWxlIG9mIHJ1bldvcmtlckZpcnN0KSB7XG4gICAgICAgIGxldCBpc1Bvc2l0aXZlUnVsZSA9IHRydWU7XG4gICAgICAgIGlmIChydWxlLnN0YXJ0c1dpdGgoXCIhXCIpKSB7XG4gICAgICAgICAgICBydWxlID0gcnVsZS5zbGljZSgxKTtcbiAgICAgICAgICAgIGlzUG9zaXRpdmVSdWxlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzUG9zaXRpdmVNYXRjaCkge1xuICAgICAgICAgICAgLy8gRG8gbm90IGxvb2sgZm9yIG1vcmUgcG9zaXRpdmUgcnVsZXMgb25jZSB3ZSBoYXZlIGEgbWF0Y2hcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIC0gRXNjYXBlcyBzcGVjaWFsIGNoYXJhY3RlcnNcbiAgICAgICAgLy8gLSBSZXBsYWNlcyAqIHdpdGggLipcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBuZXcgUmVnRXhwKGBeJHtydWxlLnJlcGxhY2UoLyhbW1xcXSgpLiorP14kfHt9XFxcXF0pL2csIFwiXFxcXCQxXCIpLnJlcGxhY2UoXCJcXFxcKlwiLCBcIi4qXCIpfSRgKS50ZXN0KHBhdGhuYW1lKTtcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBpZiAoaXNQb3NpdGl2ZVJ1bGUpIHtcbiAgICAgICAgICAgICAgICBoYXNQb3NpdGl2ZU1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIEV4aXQgZWFybHkgd2hlbiB0aGVyZSBpcyBhIG5lZ2F0aXZlIG1hdGNoXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBoYXNQb3NpdGl2ZU1hdGNoO1xufVxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@opennextjs/cloudflare/dist/api/overrides/asset-resolver/index.js\n");

/***/ })

};
;