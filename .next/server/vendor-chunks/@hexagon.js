"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@hexagon";
exports.ids = ["vendor-chunks/@hexagon"];
exports.modules = {

/***/ "(action-browser)/./node_modules/@hexagon/base64/src/base64.js":
/*!****************************************************!*\
  !*** ./node_modules/@hexagon/base64/src/base64.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64: () => (/* binding */ base64),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* ------------------------------------------------------------------------------------\n\n  base64 - MIT License - Hexagon <hexagon@56k.guru>\n\n  ------------------------------------------------------------------------------------\n\n  License:\n\n\tCopyright (c) 2021 Hexagon <hexagon@56k.guru>\n\n\tPermission is hereby granted, free of charge, to any person obtaining a copy\n\tof this software and associated documentation files (the \"Software\"), to deal\n\tin the Software without restriction, including without limitation the rights\n\tto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n\tcopies of the Software, and to permit persons to whom the Software is\n\tfurnished to do so, subject to the following conditions:\n\tThe above copyright notice and this permission notice shall be included in\n\tall copies or substantial portions of the Software.\n\tTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n\tIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\tFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n\tAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\tLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\tOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n\tTHE SOFTWARE.\n\n  ------------------------------------------------------------------------------------  */\n\nconst \n\t// Regular base64 characters\n\tchars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\",\n\n\t// Base64url characters\n\tcharsUrl = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\",\n\n\tgenLookup = (target) => {\n\t\tconst lookupTemp = typeof Uint8Array === \"undefined\" ? [] : new Uint8Array(256);\n\t\tconst len = chars.length;\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tlookupTemp[target.charCodeAt(i)] = i;\n\t\t}\n\t\treturn lookupTemp;\n\t},\n  \n\t// Use a lookup table to find the index.\n\tlookup = genLookup(chars),\n\tlookupUrl = genLookup(charsUrl); \n\n/**\n * Pre-calculated regexes for validating base64 and base64url\n */\nconst base64UrlPattern = /^[-A-Za-z0-9\\-_]*$/;\nconst base64Pattern = /^[-A-Za-z0-9+/]*={0,3}$/;\n\n/**\n * @namespace base64\n */\nconst base64 = {};\n\n/**\n * Convenience function for converting a base64 encoded string to an ArrayBuffer instance\n * @public\n * \n * @param {string} data - Base64 representation of data\n * @param {boolean} [urlMode] - If set to true, URL mode string will be expected\n * @returns {ArrayBuffer} - Decoded data\n */\nbase64.toArrayBuffer = (data, urlMode) => {\n\tconst \n\t\tlen = data.length;\n\tlet bufferLength = data.length * 0.75,\n\t\ti,\n\t\tp = 0,\n\t\tencoded1,\n\t\tencoded2,\n\t\tencoded3,\n\t\tencoded4;\n\n\tif (data[data.length - 1] === \"=\") {\n\t\tbufferLength--;\n\t\tif (data[data.length - 2] === \"=\") {\n\t\t\tbufferLength--;\n\t\t}\n\t}\n\n\tconst \n\t\tarraybuffer = new ArrayBuffer(bufferLength),\n\t\tbytes = new Uint8Array(arraybuffer),\n\t\ttarget = urlMode ? lookupUrl : lookup;\n\n\tfor (i = 0; i < len; i += 4) {\n\t\tencoded1 = target[data.charCodeAt(i)];\n\t\tencoded2 = target[data.charCodeAt(i + 1)];\n\t\tencoded3 = target[data.charCodeAt(i + 2)];\n\t\tencoded4 = target[data.charCodeAt(i + 3)];\n\n\t\tbytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n\t\tbytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n\t\tbytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n\t}\n\n\treturn arraybuffer;\n\n};\n\n/**\n * Convenience function for creating a base64 encoded string from an ArrayBuffer instance\n * @public\n * \n * @param {ArrayBuffer} arrBuf - ArrayBuffer to be encoded\n * @param {boolean} [urlMode] - If set to true, URL mode string will be returned\n * @returns {string} - Base64 representation of data\n */\nbase64.fromArrayBuffer = (arrBuf, urlMode) => {\n\tconst bytes = new Uint8Array(arrBuf);\n\tlet\n\t\ti,\n\t\tresult = \"\";\n\n\tconst\n\t\tlen = bytes.length,\n\t\ttarget = urlMode ? charsUrl : chars;\n\n\tfor (i = 0; i < len; i += 3) {\n\t\tresult += target[bytes[i] >> 2];\n\t\tresult += target[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n\t\tresult += target[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n\t\tresult += target[bytes[i + 2] & 63];\n\t}\n\n\tconst remainder = len % 3;\n\tif (remainder === 2) {\n\t\tresult = result.substring(0, result.length - 1) + (urlMode ? \"\" : \"=\");\n\t} else if (remainder === 1) {\n\t\tresult = result.substring(0, result.length - 2) + (urlMode ? \"\" : \"==\");\n\t}\n\n\treturn result;\n\n};\n\n/**\n * Convenience function for converting base64 to string\n * @public\n * \n * @param {string} str - Base64 encoded string to be decoded\n * @param {boolean} [urlMode] - If set to true, URL mode string will be expected\n * @returns {string} - Decoded string\n */\nbase64.toString = (str, urlMode) => {\n\treturn new TextDecoder().decode(base64.toArrayBuffer(str, urlMode));\n};\n\n/**\n * Convenience function for converting a javascript string to base64\n * @public\n * \n * @param {string} str - String to be converted to base64\n * @param {boolean} [urlMode] - If set to true, URL mode string will be returned\n * @returns {string} - Base64 encoded string\n */\nbase64.fromString = (str, urlMode) => {\n\treturn base64.fromArrayBuffer(new TextEncoder().encode(str), urlMode);\n};\n\n/**\n * Function to validate base64\n * @public\n * @param {string} encoded - Base64 or Base64url encoded data\n * @param {boolean} [urlMode] - If set to true, base64url will be expected\n * @returns {boolean} - Valid base64/base64url?\n */\nbase64.validate = (encoded, urlMode) => {\n\n\t// Bail out if not string\n\tif (!(typeof encoded === \"string\" || encoded instanceof String)) {\n\t\treturn false;\n\t}\n\n\t// Go on validate\n\ttry {\n\t\treturn urlMode ? base64UrlPattern.test(encoded) : base64Pattern.test(encoded);\n\t} catch (_e) {\n\t\treturn false;\n\t}\n};\n\nbase64.base64 = base64;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (base64);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/@hexagon/base64/src/base64.js\n");

/***/ })

};
;