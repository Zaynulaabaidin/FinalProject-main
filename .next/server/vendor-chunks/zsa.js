"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/zsa";
exports.ids = ["vendor-chunks/zsa"];
exports.modules = {

/***/ "(action-browser)/./node_modules/zsa/dist/index.mjs":
/*!*****************************************!*\
  !*** ./node_modules/zsa/dist/index.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompleteProcedure: () => (/* binding */ CompleteProcedure),\n/* harmony export */   DefaultOmitted: () => (/* binding */ DefaultOmitted),\n/* harmony export */   ShapeErrorNotSet: () => (/* binding */ ShapeErrorNotSet),\n/* harmony export */   TOptsSource: () => (/* binding */ TOptsSource),\n/* harmony export */   ZSAError: () => (/* binding */ ZSAError),\n/* harmony export */   ZSAResponseMeta: () => (/* binding */ ZSAResponseMeta),\n/* harmony export */   ZodSafeFunction: () => (/* binding */ ZodSafeFunction),\n/* harmony export */   addToNullishArray: () => (/* binding */ addToNullishArray),\n/* harmony export */   canDataBeUndefinedForSchema: () => (/* binding */ canDataBeUndefinedForSchema),\n/* harmony export */   chainServerActionProcedures: () => (/* binding */ chainServerActionProcedures),\n/* harmony export */   createServerAction: () => (/* binding */ createServerAction),\n/* harmony export */   createServerActionProcedure: () => (/* binding */ createServerActionProcedure),\n/* harmony export */   createZodSafeFunction: () => (/* binding */ createZodSafeFunction),\n/* harmony export */   formDataToJson: () => (/* binding */ formDataToJson),\n/* harmony export */   instanceofZodTypeArray: () => (/* binding */ instanceofZodTypeArray),\n/* harmony export */   instanceofZodTypeBoolean: () => (/* binding */ instanceofZodTypeBoolean),\n/* harmony export */   instanceofZodTypeKind: () => (/* binding */ instanceofZodTypeKind),\n/* harmony export */   instanceofZodTypeLikeVoid: () => (/* binding */ instanceofZodTypeLikeVoid),\n/* harmony export */   instanceofZodTypeObject: () => (/* binding */ instanceofZodTypeObject),\n/* harmony export */   isKeyABooleanInZodSchema: () => (/* binding */ isKeyABooleanInZodSchema),\n/* harmony export */   isKeyAnArrayInZodSchema: () => (/* binding */ isKeyAnArrayInZodSchema),\n/* harmony export */   mergeArraysAndRemoveDuplicates: () => (/* binding */ mergeArraysAndRemoveDuplicates),\n/* harmony export */   unwrapZodType: () => (/* binding */ unwrapZodType)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(action-browser)/./node_modules/zod/v3/ZodError.js\");\n// src/errors.ts\nvar ERROR_CODES = {\n  INPUT_PARSE_ERROR: \"INPUT_PARSE_ERROR\",\n  OUTPUT_PARSE_ERROR: \"OUTPUT_PARSE_ERROR\",\n  ERROR: \"ERROR\",\n  NOT_AUTHORIZED: \"NOT_AUTHORIZED\",\n  TIMEOUT: \"TIMEOUT\",\n  INTERNAL_SERVER_ERROR: \"INTERNAL_SERVER_ERROR\",\n  FORBIDDEN: \"FORBIDDEN\",\n  NOT_FOUND: \"NOT_FOUND\",\n  CONFLICT: \"CONFLICT\",\n  PRECONDITION_FAILED: \"PRECONDITION_FAILED\",\n  PAYLOAD_TOO_LARGE: \"PAYLOAD_TOO_LARGE\",\n  METHOD_NOT_SUPPORTED: \"METHOD_NOT_SUPPORTED\",\n  UNPROCESSABLE_CONTENT: \"UNPROCESSABLE_CONTENT\",\n  TOO_MANY_REQUESTS: \"TOO_MANY_REQUESTS\",\n  CLIENT_CLOSED_REQUEST: \"CLIENT_CLOSED_REQUEST\",\n  INSUFFICIENT_CREDITS: \"INSUFFICIENT_CREDITS\",\n  PAYMENT_REQUIRED: \"PAYMENT_REQUIRED\"\n};\nvar ZSAError = class extends Error {\n  /** the Error object thrown */\n  data;\n  /** the error code */\n  code;\n  inputParseErrors;\n  outputParseErrors;\n  constructor(code = ERROR_CODES.ERROR, data, more) {\n    super();\n    this.data = data;\n    this.code = code;\n    if (data instanceof Error) {\n      this.message = data.message;\n      this.stack = data.stack;\n      this.name = data.name;\n      this.cause = data.cause;\n    }\n    if (!this.message && typeof this.data === \"string\") {\n      this.message = this.data;\n    }\n    this.inputParseErrors = more?.inputParseErrors;\n    this.outputParseErrors = more?.outputParseErrors;\n  }\n};\n\n// src/utils.ts\n\nvar instanceofZodTypeKind = (type, zodTypeKind) => {\n  return type?._def?.typeName === zodTypeKind;\n};\nvar unwrapZodType = (type, unwrapPreprocess) => {\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodOptional)) {\n    return unwrapZodType(type.unwrap(), unwrapPreprocess);\n  }\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodDefault)) {\n    return unwrapZodType(type.removeDefault(), unwrapPreprocess);\n  }\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodLazy)) {\n    return unwrapZodType(type._def.getter(), unwrapPreprocess);\n  }\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodEffects)) {\n    if (type._def.effect.type === \"refinement\") {\n      return unwrapZodType(type._def.schema, unwrapPreprocess);\n    }\n    if (type._def.effect.type === \"transform\") {\n      return unwrapZodType(type._def.schema, unwrapPreprocess);\n    }\n    if (unwrapPreprocess && type._def.effect.type === \"preprocess\") {\n      return unwrapZodType(type._def.schema, unwrapPreprocess);\n    }\n  }\n  return type;\n};\nvar instanceofZodTypeObject = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodObject);\n};\nvar instanceofZodTypeArray = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodArray);\n};\nvar instanceofZodTypeBoolean = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodBoolean);\n};\nvar unwrapKeyInZodSchema = (key, schema) => {\n  const unwrapped = unwrapZodType(schema, true);\n  const isObject = instanceofZodTypeObject(unwrapped);\n  if (!isObject)\n    return null;\n  const shape = unwrapped.shape;\n  if (!(key in shape))\n    return null;\n  const value = shape[key];\n  if (!value)\n    return null;\n  return unwrapZodType(value, true);\n};\nvar isKeyAnArrayInZodSchema = (key, schema) => {\n  const unwrappedValue = unwrapKeyInZodSchema(key, schema);\n  if (unwrappedValue === null)\n    return false;\n  const isArray = instanceofZodTypeArray(unwrappedValue);\n  return isArray;\n};\nvar isKeyABooleanInZodSchema = (key, schema) => {\n  const unwrappedValue = unwrapKeyInZodSchema(key, schema);\n  if (unwrappedValue === null)\n    return false;\n  const isArray = instanceofZodTypeBoolean(unwrappedValue);\n  return isArray;\n};\nvar formDataToJson = (formData, inputSchema) => {\n  const json = {};\n  formData.forEach((value, key) => {\n    const isArraySchema = isKeyAnArrayInZodSchema(key, inputSchema);\n    const isBooleanSchema = isKeyABooleanInZodSchema(key, inputSchema);\n    if (!Reflect.has(json, key)) {\n      json[key] = isArraySchema ? [value] : value;\n      if (isBooleanSchema) {\n        if (json[key] === \"true\")\n          json[key] = true;\n        if (json[key] === \"false\")\n          json[key] = false;\n      }\n      return;\n    }\n    if (!Array.isArray(json[key])) {\n      json[key] = [json[key]];\n    }\n    json[key].push(value);\n  });\n  return json;\n};\nvar addToNullishArray = (array, value) => {\n  if (!array && !value)\n    return void 0;\n  if (!value)\n    return array;\n  const temp = [...array || []];\n  temp.push(value);\n  return temp;\n};\nvar mergeArraysAndRemoveDuplicates = (array1, array2) => {\n  if (!array1 && !array2)\n    return void 0;\n  if (!array2)\n    return array1;\n  if (!array1)\n    return array2;\n  const temp = [...array1 || [], ...array2 || []];\n  return [...new Set(temp)];\n};\nvar instanceofZodTypeLikeVoid = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodVoid) || instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodUndefined) || instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodNever);\n};\nvar canDataBeUndefinedForSchema = (schema) => {\n  if (!schema)\n    return true;\n  if (instanceofZodTypeLikeVoid(schema))\n    return true;\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodOptional)) {\n    return true;\n  }\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodDefault)) {\n    return true;\n  }\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodLazy)) {\n    return canDataBeUndefinedForSchema(schema._def.getter());\n  }\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodEffects)) {\n    if (schema._def.effect.type === \"refinement\") {\n      return canDataBeUndefinedForSchema(schema._def.schema);\n    }\n    if (schema._def.effect.type === \"transform\") {\n      return canDataBeUndefinedForSchema(schema._def.schema);\n    }\n    if (schema._def.effect.type === \"preprocess\") {\n      return canDataBeUndefinedForSchema(schema._def.schema);\n    }\n  }\n  return false;\n};\n\n// src/zod-safe-function.ts\n\n\n// src/types.ts\nvar TOptsSource = class {\n  validate;\n  constructor(validate) {\n    this.validate = validate;\n  }\n};\nvar DefaultOmitted = {\n  $internals: 1,\n  handleError: 1,\n  onInputParseError: 1,\n  getTimeoutErrorPromise: 1,\n  getProcedureChainOutput: 1,\n  handleSuccess: 1,\n  handleStart: 1,\n  parseInputData: 1,\n  parseOutputData: 1,\n  onOutputParseError: 1,\n  checkTimeoutStatus: 1,\n  getRetryDelay: 1,\n  evaluateInputSchema: 1,\n  getFinalStaticInputSchema: 1\n};\nvar ZSAResponseMeta = class {\n  /**\n   * the headers of the response\n   */\n  headers;\n  /**\n   * the status code of the response\n   *\n   * @default 200\n   */\n  statusCode;\n  constructor() {\n    this.statusCode = 200;\n    this.headers = new Headers();\n  }\n};\nvar ShapeErrorNotSet = \"ShapeErrorNotSet\";\n\n// src/zod-safe-function.ts\nvar validateOpts = (opts) => {\n  if (opts && (!(opts.source instanceof TOptsSource) || !opts.source.validate())) {\n    throw new Error(\"Invalid opts, must originate from the server\");\n  }\n};\nvar ZodSafeFunction = class _ZodSafeFunction {\n  /** The internals of the Zod Safe Function */\n  $internals;\n  constructor(internals) {\n    this.$internals = internals;\n  }\n  /** Check if the timeout has triggered, if so, throw a ZSAError */\n  checkTimeoutStatus(timeoutStatus) {\n    if (timeoutStatus.isTimeout) {\n      throw new ZSAError(\n        \"TIMEOUT\",\n        `Exceeded timeout of ${this.$internals.timeout} ms`\n      );\n    }\n  }\n  /**\n   *\n   * Get the retry delay for the current retry attempt\n   *\n   * If there should be no retry, returns -1\n   */\n  getRetryDelay($err, currentAttempt) {\n    try {\n      const err = $err instanceof ZSAError ? $err : new ZSAError(\"ERROR\", $err);\n      if (err.code === \"TIMEOUT\") {\n        return -1;\n      }\n      const config = this.$internals.retryConfig;\n      if (!config)\n        return -1;\n      if (this.$internals.isProcedure)\n        return -1;\n      const shouldRetry = currentAttempt < config.maxAttempts;\n      let retryDelay = 0;\n      if (typeof config.delay === \"function\") {\n        retryDelay = config.delay(currentAttempt, err);\n      } else if (typeof config.delay === \"number\") {\n        retryDelay = config.delay;\n      }\n      if (shouldRetry)\n        return retryDelay;\n      return -1;\n    } catch {\n      return -1;\n    }\n  }\n  /**\n   *  Run through the procedure chain and get the final context\n   */\n  async getProcedureChainOutput($args) {\n    const {\n      args,\n      timeoutStatus,\n      request,\n      responseMeta,\n      onInputSchema,\n      previousState\n    } = $args;\n    let accData = void 0;\n    let inputSchema = void 0;\n    for (let i = 0; i < this.$internals.procedureHandlerChain.length; i += 1) {\n      this.checkTimeoutStatus(timeoutStatus);\n      const procedureHandler = this.$internals.procedureHandlerChain[i];\n      const [data, err] = await procedureHandler(args, void 0, {\n        ctx: accData,\n        request,\n        responseMeta,\n        previousState,\n        source: new TOptsSource(() => true),\n        previousInputSchema: inputSchema,\n        onInputSchema: (schema) => {\n          inputSchema = schema;\n        }\n      });\n      if (err) {\n        throw err;\n      }\n      accData = data;\n    }\n    onInputSchema?.(inputSchema);\n    return accData;\n  }\n  /**\n   *  Run through the procedure chain and get the final static input schema\n   */\n  async getFinalStaticInputSchema(args) {\n    let inputSchema = void 0;\n    if (this.$internals.isProcedure && args.opts) {\n      await this.evaluateInputSchema({\n        ctx: void 0,\n        opts: args.opts,\n        noFunctionsAllowed: true\n      });\n      return;\n    }\n    for (const procedureHandler of this.$internals.procedureHandlerChain) {\n      await procedureHandler(void 0, void 0, {\n        source: new TOptsSource(() => true),\n        previousInputSchema: inputSchema,\n        returnInputSchema: true,\n        onInputSchema: (schema) => {\n          inputSchema = schema;\n        }\n      });\n    }\n    if (!args.opts) {\n      args.opts = {\n        source: new TOptsSource(() => true)\n      };\n    }\n    args.opts.previousInputSchema = inputSchema;\n    return await this.evaluateInputSchema({\n      ctx: void 0,\n      opts: args.opts,\n      noFunctionsAllowed: true\n    }) || zod__WEBPACK_IMPORTED_MODULE_0__.undefined();\n  }\n  /** set a timeout on the server action */\n  timeout(milliseconds) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      timeout: milliseconds\n    });\n  }\n  /** set a retry mechanism on the server action */\n  retry(config) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      retryConfig: config\n    });\n  }\n  /**\n   * set the input schema for the server action\n   *\n   * @example\n   * ```ts\n   * .input(z.object({\n   *   message: z.string()\n   * }))\n   * ```\n   */\n  input(schema, opts) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      // @ts-expect-error\n      inputSchema: schema,\n      inputType: opts?.type,\n      skipInputParsing: opts?.skipInputParsing\n    });\n  }\n  /** set the output schema for the server action */\n  output(schema) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      // @ts-expect-error\n      outputSchema: schema\n    });\n  }\n  /** set a handler function for input parse errors */\n  onInputParseError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onInputParseError: fn\n    });\n  }\n  /** set a handler function for output parse errors */\n  onOutputParseError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onOutputParseError: fn\n    });\n  }\n  /** set a handler function for errors */\n  onError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onErrorFns: [...this.$internals.onErrorFns || [], fn]\n    });\n  }\n  /** set a handler function for when the server action starts */\n  onStart(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onStartFns: [...this.$internals.onStartFns || [], fn]\n    });\n  }\n  /** set a handler function for when the server action succeeds */\n  onSuccess(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onSuccessFns: [...this.$internals.onSuccessFns || [], fn]\n    });\n  }\n  /** set a handler function for when the server action completes (success or error) */\n  onComplete(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onCompleteFns: [...this.$internals.onCompleteFns || [], fn]\n    });\n  }\n  /** a helper function to parse output data given the active output schema */\n  async parseOutputData(data, ctx, timeoutStatus, opts) {\n    this.checkTimeoutStatus(timeoutStatus);\n    if (!this.$internals.outputSchema)\n      return data;\n    const schema = typeof this.$internals.outputSchema === \"function\" ? await this.$internals.outputSchema({\n      ctx,\n      unparsedData: data,\n      request: opts?.request,\n      responseMeta: opts?.responseMeta,\n      previousState: opts?.previousState\n    }) : this.$internals.outputSchema;\n    if (!(schema instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType)) {\n      throw new ZSAError(\"ERROR\", \"Output schema must be a ZodType\");\n    }\n    const safe = await schema.safeParseAsync(data);\n    if (!safe.success) {\n      if (this.$internals.onOutputParseError) {\n        await this.$internals.onOutputParseError(safe.error);\n      }\n      const flattenedErrors = safe.error.flatten();\n      const formattedErrors = safe.error.format();\n      throw new ZSAError(\"OUTPUT_PARSE_ERROR\", safe.error, {\n        outputParseErrors: {\n          fieldErrors: flattenedErrors?.fieldErrors,\n          formErrors: flattenedErrors?.formErrors,\n          formattedErrors\n        }\n      });\n    }\n    return safe.data;\n  }\n  /** helper function to handle start with timeout checkpoints */\n  async handleStart(args, timeoutStatus) {\n    this.checkTimeoutStatus(timeoutStatus);\n    if (this.$internals.isProcedure)\n      return;\n    for (const fn of this.$internals.onStartFns || []) {\n      await fn({ args });\n      this.checkTimeoutStatus(timeoutStatus);\n    }\n  }\n  /** helper function to handle success with timeout checkpoints */\n  async handleSuccess(args, data, timeoutStatus) {\n    this.checkTimeoutStatus(timeoutStatus);\n    if (this.$internals.isProcedure)\n      return;\n    for (const fn of this.$internals.onSuccessFns || []) {\n      await fn({ args, data });\n      this.checkTimeoutStatus(timeoutStatus);\n    }\n    this.checkTimeoutStatus(timeoutStatus);\n    for (const fn of this.$internals.onCompleteFns || []) {\n      await fn({\n        isSuccess: true,\n        isError: false,\n        status: \"success\",\n        args,\n        data\n      });\n      this.checkTimeoutStatus(timeoutStatus);\n    }\n  }\n  /** helper function to handle errors with timeout checkpoints */\n  async handleError(err, inputRaw, inputParsed) {\n    if (err.message === \"NEXT_REDIRECT\" || err.message === \"NEXT_NOT_FOUND\") {\n      throw err;\n    }\n    if (this.$internals.isProcedure)\n      return [null, err];\n    let customError;\n    if (this.$internals.shapeErrorFns !== void 0) {\n      let accData = void 0;\n      for (const fn of this.$internals.shapeErrorFns) {\n        accData = await fn({\n          err,\n          typedData: {\n            // @ts-expect-error\n            inputParseErrors: err instanceof ZSAError ? err.inputParseErrors : void 0,\n            // @ts-expect-error\n            outputParseErrors: err instanceof ZSAError ? err.outputParseErrors : void 0,\n            inputParsed,\n            inputRaw\n          },\n          ctx: accData\n        });\n      }\n      customError = accData;\n    } else {\n      customError = err instanceof ZSAError ? err : new ZSAError(\"ERROR\", err);\n    }\n    for (const fn of this.$internals.onErrorFns || []) {\n      await fn(customError);\n    }\n    for (const fn of this.$internals.onCompleteFns || []) {\n      await fn({\n        isSuccess: false,\n        isError: true,\n        status: \"error\",\n        error: customError\n      });\n    }\n    if (this.$internals.shapeErrorFns !== void 0) {\n      return [null, customError];\n    }\n    const stringifyIfNeeded = (data2) => typeof data2 === \"string\" ? data2 : JSON.stringify(data2);\n    let formattedErrors;\n    let flattenedErrors;\n    const data = err.data;\n    if (data instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError && customError.code === \"INPUT_PARSE_ERROR\") {\n      formattedErrors = data.format();\n      flattenedErrors = data.flatten();\n    }\n    return [\n      null,\n      {\n        data: stringifyIfNeeded(customError.data),\n        name: customError.name,\n        message: stringifyIfNeeded(customError.message),\n        code: customError.code,\n        fieldErrors: flattenedErrors?.fieldErrors,\n        formErrors: flattenedErrors?.formErrors,\n        formattedErrors\n      }\n    ];\n  }\n  async evaluateInputSchema(args) {\n    const { ctx, opts, noFunctionsAllowed } = args;\n    let inputSchema = this.$internals.inputSchema;\n    if (noFunctionsAllowed && typeof inputSchema === \"function\") {\n      throw new Error(\"Input functions are not suppported yet\");\n    }\n    if (typeof inputSchema === \"function\") {\n      inputSchema = await inputSchema({\n        ctx,\n        previousSchema: opts?.previousInputSchema || zod__WEBPACK_IMPORTED_MODULE_0__.undefined(),\n        request: opts?.request,\n        responseMeta: opts?.responseMeta,\n        previousState: opts?.previousState\n      });\n    }\n    if (inputSchema && !(inputSchema instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType)) {\n      throw new ZSAError(\"ERROR\", \"Input schema must be a ZodType\");\n    }\n    let final;\n    if (!opts?.previousInputSchema) {\n      final = inputSchema;\n    } else if (!inputSchema) {\n      final = opts.previousInputSchema;\n    } else if (instanceofZodTypeObject(opts.previousInputSchema) && instanceofZodTypeObject(inputSchema)) {\n      final = opts.previousInputSchema.merge(inputSchema);\n    } else {\n      final = inputSchema;\n    }\n    opts?.onInputSchema?.(final);\n    return final || zod__WEBPACK_IMPORTED_MODULE_0__.undefined();\n  }\n  /** helper function to parse input data given the active input schema */\n  async parseInputData($data, overrideData, timeoutStatus, ctx, opts) {\n    this.checkTimeoutStatus(timeoutStatus);\n    const inputSchema = await this.evaluateInputSchema({\n      ctx,\n      opts\n    });\n    if (this.$internals.skipInputParsing) {\n      return $data;\n    }\n    let data = $data;\n    if ($data instanceof FormData && this.$internals.inputType !== \"json\") {\n      data = {\n        ...formDataToJson(data, inputSchema),\n        ...this.$internals.inputType !== \"state\" ? overrideData || {} : {}\n      };\n    }\n    const canChangeToUndefined = ($data instanceof FormData || opts?.isFromOpenApiHandler) && canDataBeUndefinedForSchema(inputSchema);\n    if (canChangeToUndefined && data && typeof data === \"object\" && Object.keys(data).length === 0) {\n      data = void 0;\n    }\n    opts?.onArgs?.(data);\n    await this.handleStart(data, timeoutStatus);\n    if (!this.$internals.inputSchema && data !== void 0 && this.$internals.isProcedure) {\n      return void 0;\n    }\n    const safe = await inputSchema.safeParseAsync(data);\n    if (!safe.success) {\n      if (this.$internals.onInputParseError) {\n        await this.$internals.onInputParseError(safe.error);\n      }\n      const flattenedErrors = safe.error.flatten();\n      const formattedErrors = safe.error.format();\n      throw new ZSAError(\"INPUT_PARSE_ERROR\", safe.error, {\n        inputParseErrors: {\n          fieldErrors: flattenedErrors?.fieldErrors,\n          formErrors: flattenedErrors?.formErrors,\n          formattedErrors\n        }\n      });\n    }\n    return safe.data;\n  }\n  /** set a handler function for when the server action starts */\n  experimental_shapeError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      // @ts-expect-error\n      shapeErrorFns: [...this.$internals.shapeErrorFns || [], fn]\n    });\n  }\n  getTimeoutErrorPromise = (timeoutMs) => new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new ZSAError(\"TIMEOUT\", `Exceeded timeout of ${timeoutMs} ms`));\n    }, timeoutMs);\n  });\n  /** set the handler function for the server action */\n  handler(fn) {\n    const timeoutStatus = {\n      isTimeout: false\n    };\n    const wrapper = async ($args, overrideArgs, opts) => {\n      validateOpts(opts);\n      if (opts?.returnInputSchema) {\n        return await this.getFinalStaticInputSchema({\n          opts\n        });\n      } else if (opts?.returnOutputSchema) {\n        if (typeof this.$internals.outputSchema === \"function\") {\n          throw new Error(\n            \"Cannot return output schema from a function output schema\"\n          );\n        }\n        return this.$internals.outputSchema;\n      }\n      let args;\n      let parsedArgs;\n      if (this.$internals.inputType === \"state\") {\n        args = overrideArgs;\n      } else {\n        args = $args;\n      }\n      let previousState = opts?.previousState || void 0;\n      if (this.$internals.inputType === \"state\" && !this.$internals.isProcedure) {\n        previousState = $args;\n      }\n      try {\n        let ctx;\n        if (this.$internals.isProcedure && opts) {\n          ctx = opts.ctx;\n        } else {\n          ctx = await this.getProcedureChainOutput({\n            // @ts-expect-error\n            args,\n            timeoutStatus,\n            request: opts?.request,\n            responseMeta: opts?.responseMeta,\n            onInputSchema: (schema) => {\n              if (!opts) {\n                opts = {\n                  source: new TOptsSource(() => true)\n                };\n              }\n              opts.previousInputSchema = schema;\n            },\n            previousState\n          });\n        }\n        const input = await this.parseInputData(\n          args,\n          overrideArgs,\n          timeoutStatus,\n          ctx,\n          opts\n        );\n        opts?.onParsedArgs?.(input);\n        parsedArgs = input;\n        this.checkTimeoutStatus(timeoutStatus);\n        const data = await fn({\n          input,\n          ctx,\n          request: opts?.request,\n          responseMeta: opts?.responseMeta,\n          previousState\n        });\n        const parsed = await this.parseOutputData(\n          data,\n          ctx,\n          timeoutStatus,\n          opts\n        );\n        await this.handleSuccess(input, parsed, timeoutStatus);\n        return [parsed, null];\n      } catch (err) {\n        const retryDelay = this.getRetryDelay(err, opts?.attempts || 1);\n        if (retryDelay >= 0) {\n          await new Promise((r) => setTimeout(r, retryDelay));\n          return await wrapper($args, overrideArgs, {\n            ...opts || {},\n            attempts: (opts?.attempts || 1) + 1,\n            source: new TOptsSource(() => true)\n          });\n        }\n        return await this.handleError(err, args, parsedArgs);\n      }\n    };\n    const withTimeout = async (args, overrideArgs, opts) => {\n      const timeoutMs = this.$internals.timeout;\n      if (!timeoutMs)\n        return await wrapper(args, overrideArgs, opts);\n      validateOpts(opts);\n      let gotArgs = void 0;\n      let gotParsedArgs = void 0;\n      return await Promise.race([\n        wrapper(args, overrideArgs, {\n          ...opts || {},\n          onArgs: (args2) => {\n            gotArgs = args2;\n          },\n          onParsedArgs: (parsedArgs) => {\n            gotParsedArgs = parsedArgs;\n          },\n          source: new TOptsSource(() => true)\n        }),\n        this.getTimeoutErrorPromise(timeoutMs)\n      ]).then((r) => r).catch((err) => {\n        timeoutStatus.isTimeout = true;\n        return this.handleError(err, gotArgs, gotParsedArgs);\n      });\n    };\n    if (this.$internals.isProcedure) {\n      const handler = this.$internals.timeout ? withTimeout : wrapper;\n      return new CompleteProcedure({\n        inputSchema: this.$internals.inputSchema,\n        handlerChain: [...this.$internals.procedureHandlerChain, handler],\n        shapeErrorFns: this.$internals.shapeErrorFns,\n        lastHandler: handler,\n        onCompleteFns: this.$internals.onCompleteFns,\n        onErrorFns: this.$internals.onErrorFns,\n        onStartFns: this.$internals.onStartFns,\n        onSuccessFns: this.$internals.onSuccessFns,\n        timeout: this.$internals.timeout,\n        retryConfig: this.$internals.retryConfig\n      });\n    }\n    if (this.$internals.timeout) {\n      return withTimeout;\n    }\n    return wrapper;\n  }\n};\nfunction createZodSafeFunction(isProcedure, parentProcedure) {\n  return new ZodSafeFunction({\n    inputSchema: parentProcedure?.$internals.inputSchema || void 0,\n    outputSchema: void 0,\n    shapeErrorFns: parentProcedure?.$internals.shapeErrorFns || void 0,\n    isChained: parentProcedure !== void 0,\n    isProcedure: isProcedure === true,\n    procedureHandlerChain: parentProcedure?.$internals.handlerChain || [],\n    onCompleteFns: parentProcedure?.$internals.onCompleteFns,\n    onErrorFns: parentProcedure?.$internals.onErrorFns,\n    onStartFns: parentProcedure?.$internals.onStartFns,\n    onSuccessFns: parentProcedure?.$internals.onSuccessFns\n  });\n}\nfunction createServerAction() {\n  return new ZodSafeFunction({\n    inputSchema: void 0,\n    outputSchema: void 0,\n    shapeErrorFns: void 0,\n    procedureHandlerChain: []\n  });\n}\n\n// src/procedure.ts\nvar CompleteProcedure = class {\n  $internals;\n  constructor(params) {\n    this.$internals = params;\n  }\n  /** make a server action with the current procedure */\n  createServerAction() {\n    return new ZodSafeFunction({\n      inputSchema: this.$internals.inputSchema,\n      outputSchema: void 0,\n      procedureHandlerChain: this.$internals.handlerChain,\n      onErrorFns: this.$internals.onErrorFns,\n      onStartFns: this.$internals.onStartFns,\n      onSuccessFns: this.$internals.onSuccessFns,\n      onCompleteFns: this.$internals.onCompleteFns,\n      timeout: this.$internals.timeout,\n      retryConfig: this.$internals.retryConfig,\n      shapeErrorFns: this.$internals.shapeErrorFns\n    });\n  }\n};\nvar createServerActionProcedure = (parent) => {\n  return createZodSafeFunction(true, parent);\n};\nvar chainServerActionProcedures = (first, second) => {\n  return new CompleteProcedure({\n    inputSchema: second.$internals.inputSchema,\n    handlerChain: [\n      ...first.$internals.handlerChain,\n      second.$internals.lastHandler\n    ],\n    lastHandler: second.$internals.lastHandler,\n    timeout: second.$internals.timeout || first.$internals.timeout,\n    retryConfig: second.$internals.retryConfig || first.$internals.retryConfig,\n    shapeErrorFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.shapeErrorFns,\n      second.$internals.shapeErrorFns\n    ),\n    onErrorFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onErrorFns,\n      second.$internals.onErrorFns\n    ),\n    onStartFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onStartFns,\n      second.$internals.onStartFns\n    ),\n    onSuccessFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onSuccessFns,\n      second.$internals.onSuccessFns\n    ),\n    onCompleteFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onCompleteFns,\n      second.$internals.onCompleteFns\n    )\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(action-browser)/./node_modules/zsa/dist/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/zsa/dist/index.mjs":
/*!*****************************************!*\
  !*** ./node_modules/zsa/dist/index.mjs ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompleteProcedure: () => (/* binding */ CompleteProcedure),\n/* harmony export */   DefaultOmitted: () => (/* binding */ DefaultOmitted),\n/* harmony export */   ShapeErrorNotSet: () => (/* binding */ ShapeErrorNotSet),\n/* harmony export */   TOptsSource: () => (/* binding */ TOptsSource),\n/* harmony export */   ZSAError: () => (/* binding */ ZSAError),\n/* harmony export */   ZSAResponseMeta: () => (/* binding */ ZSAResponseMeta),\n/* harmony export */   ZodSafeFunction: () => (/* binding */ ZodSafeFunction),\n/* harmony export */   addToNullishArray: () => (/* binding */ addToNullishArray),\n/* harmony export */   canDataBeUndefinedForSchema: () => (/* binding */ canDataBeUndefinedForSchema),\n/* harmony export */   chainServerActionProcedures: () => (/* binding */ chainServerActionProcedures),\n/* harmony export */   createServerAction: () => (/* binding */ createServerAction),\n/* harmony export */   createServerActionProcedure: () => (/* binding */ createServerActionProcedure),\n/* harmony export */   createZodSafeFunction: () => (/* binding */ createZodSafeFunction),\n/* harmony export */   formDataToJson: () => (/* binding */ formDataToJson),\n/* harmony export */   instanceofZodTypeArray: () => (/* binding */ instanceofZodTypeArray),\n/* harmony export */   instanceofZodTypeBoolean: () => (/* binding */ instanceofZodTypeBoolean),\n/* harmony export */   instanceofZodTypeKind: () => (/* binding */ instanceofZodTypeKind),\n/* harmony export */   instanceofZodTypeLikeVoid: () => (/* binding */ instanceofZodTypeLikeVoid),\n/* harmony export */   instanceofZodTypeObject: () => (/* binding */ instanceofZodTypeObject),\n/* harmony export */   isKeyABooleanInZodSchema: () => (/* binding */ isKeyABooleanInZodSchema),\n/* harmony export */   isKeyAnArrayInZodSchema: () => (/* binding */ isKeyAnArrayInZodSchema),\n/* harmony export */   mergeArraysAndRemoveDuplicates: () => (/* binding */ mergeArraysAndRemoveDuplicates),\n/* harmony export */   unwrapZodType: () => (/* binding */ unwrapZodType)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/ZodError.js\");\n// src/errors.ts\nvar ERROR_CODES = {\n  INPUT_PARSE_ERROR: \"INPUT_PARSE_ERROR\",\n  OUTPUT_PARSE_ERROR: \"OUTPUT_PARSE_ERROR\",\n  ERROR: \"ERROR\",\n  NOT_AUTHORIZED: \"NOT_AUTHORIZED\",\n  TIMEOUT: \"TIMEOUT\",\n  INTERNAL_SERVER_ERROR: \"INTERNAL_SERVER_ERROR\",\n  FORBIDDEN: \"FORBIDDEN\",\n  NOT_FOUND: \"NOT_FOUND\",\n  CONFLICT: \"CONFLICT\",\n  PRECONDITION_FAILED: \"PRECONDITION_FAILED\",\n  PAYLOAD_TOO_LARGE: \"PAYLOAD_TOO_LARGE\",\n  METHOD_NOT_SUPPORTED: \"METHOD_NOT_SUPPORTED\",\n  UNPROCESSABLE_CONTENT: \"UNPROCESSABLE_CONTENT\",\n  TOO_MANY_REQUESTS: \"TOO_MANY_REQUESTS\",\n  CLIENT_CLOSED_REQUEST: \"CLIENT_CLOSED_REQUEST\",\n  INSUFFICIENT_CREDITS: \"INSUFFICIENT_CREDITS\",\n  PAYMENT_REQUIRED: \"PAYMENT_REQUIRED\"\n};\nvar ZSAError = class extends Error {\n  /** the Error object thrown */\n  data;\n  /** the error code */\n  code;\n  inputParseErrors;\n  outputParseErrors;\n  constructor(code = ERROR_CODES.ERROR, data, more) {\n    super();\n    this.data = data;\n    this.code = code;\n    if (data instanceof Error) {\n      this.message = data.message;\n      this.stack = data.stack;\n      this.name = data.name;\n      this.cause = data.cause;\n    }\n    if (!this.message && typeof this.data === \"string\") {\n      this.message = this.data;\n    }\n    this.inputParseErrors = more?.inputParseErrors;\n    this.outputParseErrors = more?.outputParseErrors;\n  }\n};\n\n// src/utils.ts\n\nvar instanceofZodTypeKind = (type, zodTypeKind) => {\n  return type?._def?.typeName === zodTypeKind;\n};\nvar unwrapZodType = (type, unwrapPreprocess) => {\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodOptional)) {\n    return unwrapZodType(type.unwrap(), unwrapPreprocess);\n  }\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodDefault)) {\n    return unwrapZodType(type.removeDefault(), unwrapPreprocess);\n  }\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodLazy)) {\n    return unwrapZodType(type._def.getter(), unwrapPreprocess);\n  }\n  if (instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodEffects)) {\n    if (type._def.effect.type === \"refinement\") {\n      return unwrapZodType(type._def.schema, unwrapPreprocess);\n    }\n    if (type._def.effect.type === \"transform\") {\n      return unwrapZodType(type._def.schema, unwrapPreprocess);\n    }\n    if (unwrapPreprocess && type._def.effect.type === \"preprocess\") {\n      return unwrapZodType(type._def.schema, unwrapPreprocess);\n    }\n  }\n  return type;\n};\nvar instanceofZodTypeObject = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodObject);\n};\nvar instanceofZodTypeArray = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodArray);\n};\nvar instanceofZodTypeBoolean = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodBoolean);\n};\nvar unwrapKeyInZodSchema = (key, schema) => {\n  const unwrapped = unwrapZodType(schema, true);\n  const isObject = instanceofZodTypeObject(unwrapped);\n  if (!isObject)\n    return null;\n  const shape = unwrapped.shape;\n  if (!(key in shape))\n    return null;\n  const value = shape[key];\n  if (!value)\n    return null;\n  return unwrapZodType(value, true);\n};\nvar isKeyAnArrayInZodSchema = (key, schema) => {\n  const unwrappedValue = unwrapKeyInZodSchema(key, schema);\n  if (unwrappedValue === null)\n    return false;\n  const isArray = instanceofZodTypeArray(unwrappedValue);\n  return isArray;\n};\nvar isKeyABooleanInZodSchema = (key, schema) => {\n  const unwrappedValue = unwrapKeyInZodSchema(key, schema);\n  if (unwrappedValue === null)\n    return false;\n  const isArray = instanceofZodTypeBoolean(unwrappedValue);\n  return isArray;\n};\nvar formDataToJson = (formData, inputSchema) => {\n  const json = {};\n  formData.forEach((value, key) => {\n    const isArraySchema = isKeyAnArrayInZodSchema(key, inputSchema);\n    const isBooleanSchema = isKeyABooleanInZodSchema(key, inputSchema);\n    if (!Reflect.has(json, key)) {\n      json[key] = isArraySchema ? [value] : value;\n      if (isBooleanSchema) {\n        if (json[key] === \"true\")\n          json[key] = true;\n        if (json[key] === \"false\")\n          json[key] = false;\n      }\n      return;\n    }\n    if (!Array.isArray(json[key])) {\n      json[key] = [json[key]];\n    }\n    json[key].push(value);\n  });\n  return json;\n};\nvar addToNullishArray = (array, value) => {\n  if (!array && !value)\n    return void 0;\n  if (!value)\n    return array;\n  const temp = [...array || []];\n  temp.push(value);\n  return temp;\n};\nvar mergeArraysAndRemoveDuplicates = (array1, array2) => {\n  if (!array1 && !array2)\n    return void 0;\n  if (!array2)\n    return array1;\n  if (!array1)\n    return array2;\n  const temp = [...array1 || [], ...array2 || []];\n  return [...new Set(temp)];\n};\nvar instanceofZodTypeLikeVoid = (type) => {\n  return instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodVoid) || instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodUndefined) || instanceofZodTypeKind(type, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodNever);\n};\nvar canDataBeUndefinedForSchema = (schema) => {\n  if (!schema)\n    return true;\n  if (instanceofZodTypeLikeVoid(schema))\n    return true;\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodOptional)) {\n    return true;\n  }\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodDefault)) {\n    return true;\n  }\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodLazy)) {\n    return canDataBeUndefinedForSchema(schema._def.getter());\n  }\n  if (instanceofZodTypeKind(schema, zod__WEBPACK_IMPORTED_MODULE_0__.ZodFirstPartyTypeKind.ZodEffects)) {\n    if (schema._def.effect.type === \"refinement\") {\n      return canDataBeUndefinedForSchema(schema._def.schema);\n    }\n    if (schema._def.effect.type === \"transform\") {\n      return canDataBeUndefinedForSchema(schema._def.schema);\n    }\n    if (schema._def.effect.type === \"preprocess\") {\n      return canDataBeUndefinedForSchema(schema._def.schema);\n    }\n  }\n  return false;\n};\n\n// src/zod-safe-function.ts\n\n\n// src/types.ts\nvar TOptsSource = class {\n  validate;\n  constructor(validate) {\n    this.validate = validate;\n  }\n};\nvar DefaultOmitted = {\n  $internals: 1,\n  handleError: 1,\n  onInputParseError: 1,\n  getTimeoutErrorPromise: 1,\n  getProcedureChainOutput: 1,\n  handleSuccess: 1,\n  handleStart: 1,\n  parseInputData: 1,\n  parseOutputData: 1,\n  onOutputParseError: 1,\n  checkTimeoutStatus: 1,\n  getRetryDelay: 1,\n  evaluateInputSchema: 1,\n  getFinalStaticInputSchema: 1\n};\nvar ZSAResponseMeta = class {\n  /**\n   * the headers of the response\n   */\n  headers;\n  /**\n   * the status code of the response\n   *\n   * @default 200\n   */\n  statusCode;\n  constructor() {\n    this.statusCode = 200;\n    this.headers = new Headers();\n  }\n};\nvar ShapeErrorNotSet = \"ShapeErrorNotSet\";\n\n// src/zod-safe-function.ts\nvar validateOpts = (opts) => {\n  if (opts && (!(opts.source instanceof TOptsSource) || !opts.source.validate())) {\n    throw new Error(\"Invalid opts, must originate from the server\");\n  }\n};\nvar ZodSafeFunction = class _ZodSafeFunction {\n  /** The internals of the Zod Safe Function */\n  $internals;\n  constructor(internals) {\n    this.$internals = internals;\n  }\n  /** Check if the timeout has triggered, if so, throw a ZSAError */\n  checkTimeoutStatus(timeoutStatus) {\n    if (timeoutStatus.isTimeout) {\n      throw new ZSAError(\n        \"TIMEOUT\",\n        `Exceeded timeout of ${this.$internals.timeout} ms`\n      );\n    }\n  }\n  /**\n   *\n   * Get the retry delay for the current retry attempt\n   *\n   * If there should be no retry, returns -1\n   */\n  getRetryDelay($err, currentAttempt) {\n    try {\n      const err = $err instanceof ZSAError ? $err : new ZSAError(\"ERROR\", $err);\n      if (err.code === \"TIMEOUT\") {\n        return -1;\n      }\n      const config = this.$internals.retryConfig;\n      if (!config)\n        return -1;\n      if (this.$internals.isProcedure)\n        return -1;\n      const shouldRetry = currentAttempt < config.maxAttempts;\n      let retryDelay = 0;\n      if (typeof config.delay === \"function\") {\n        retryDelay = config.delay(currentAttempt, err);\n      } else if (typeof config.delay === \"number\") {\n        retryDelay = config.delay;\n      }\n      if (shouldRetry)\n        return retryDelay;\n      return -1;\n    } catch {\n      return -1;\n    }\n  }\n  /**\n   *  Run through the procedure chain and get the final context\n   */\n  async getProcedureChainOutput($args) {\n    const {\n      args,\n      timeoutStatus,\n      request,\n      responseMeta,\n      onInputSchema,\n      previousState\n    } = $args;\n    let accData = void 0;\n    let inputSchema = void 0;\n    for (let i = 0; i < this.$internals.procedureHandlerChain.length; i += 1) {\n      this.checkTimeoutStatus(timeoutStatus);\n      const procedureHandler = this.$internals.procedureHandlerChain[i];\n      const [data, err] = await procedureHandler(args, void 0, {\n        ctx: accData,\n        request,\n        responseMeta,\n        previousState,\n        source: new TOptsSource(() => true),\n        previousInputSchema: inputSchema,\n        onInputSchema: (schema) => {\n          inputSchema = schema;\n        }\n      });\n      if (err) {\n        throw err;\n      }\n      accData = data;\n    }\n    onInputSchema?.(inputSchema);\n    return accData;\n  }\n  /**\n   *  Run through the procedure chain and get the final static input schema\n   */\n  async getFinalStaticInputSchema(args) {\n    let inputSchema = void 0;\n    if (this.$internals.isProcedure && args.opts) {\n      await this.evaluateInputSchema({\n        ctx: void 0,\n        opts: args.opts,\n        noFunctionsAllowed: true\n      });\n      return;\n    }\n    for (const procedureHandler of this.$internals.procedureHandlerChain) {\n      await procedureHandler(void 0, void 0, {\n        source: new TOptsSource(() => true),\n        previousInputSchema: inputSchema,\n        returnInputSchema: true,\n        onInputSchema: (schema) => {\n          inputSchema = schema;\n        }\n      });\n    }\n    if (!args.opts) {\n      args.opts = {\n        source: new TOptsSource(() => true)\n      };\n    }\n    args.opts.previousInputSchema = inputSchema;\n    return await this.evaluateInputSchema({\n      ctx: void 0,\n      opts: args.opts,\n      noFunctionsAllowed: true\n    }) || zod__WEBPACK_IMPORTED_MODULE_0__.undefined();\n  }\n  /** set a timeout on the server action */\n  timeout(milliseconds) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      timeout: milliseconds\n    });\n  }\n  /** set a retry mechanism on the server action */\n  retry(config) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      retryConfig: config\n    });\n  }\n  /**\n   * set the input schema for the server action\n   *\n   * @example\n   * ```ts\n   * .input(z.object({\n   *   message: z.string()\n   * }))\n   * ```\n   */\n  input(schema, opts) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      // @ts-expect-error\n      inputSchema: schema,\n      inputType: opts?.type,\n      skipInputParsing: opts?.skipInputParsing\n    });\n  }\n  /** set the output schema for the server action */\n  output(schema) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      // @ts-expect-error\n      outputSchema: schema\n    });\n  }\n  /** set a handler function for input parse errors */\n  onInputParseError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onInputParseError: fn\n    });\n  }\n  /** set a handler function for output parse errors */\n  onOutputParseError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onOutputParseError: fn\n    });\n  }\n  /** set a handler function for errors */\n  onError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onErrorFns: [...this.$internals.onErrorFns || [], fn]\n    });\n  }\n  /** set a handler function for when the server action starts */\n  onStart(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onStartFns: [...this.$internals.onStartFns || [], fn]\n    });\n  }\n  /** set a handler function for when the server action succeeds */\n  onSuccess(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onSuccessFns: [...this.$internals.onSuccessFns || [], fn]\n    });\n  }\n  /** set a handler function for when the server action completes (success or error) */\n  onComplete(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      onCompleteFns: [...this.$internals.onCompleteFns || [], fn]\n    });\n  }\n  /** a helper function to parse output data given the active output schema */\n  async parseOutputData(data, ctx, timeoutStatus, opts) {\n    this.checkTimeoutStatus(timeoutStatus);\n    if (!this.$internals.outputSchema)\n      return data;\n    const schema = typeof this.$internals.outputSchema === \"function\" ? await this.$internals.outputSchema({\n      ctx,\n      unparsedData: data,\n      request: opts?.request,\n      responseMeta: opts?.responseMeta,\n      previousState: opts?.previousState\n    }) : this.$internals.outputSchema;\n    if (!(schema instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType)) {\n      throw new ZSAError(\"ERROR\", \"Output schema must be a ZodType\");\n    }\n    const safe = await schema.safeParseAsync(data);\n    if (!safe.success) {\n      if (this.$internals.onOutputParseError) {\n        await this.$internals.onOutputParseError(safe.error);\n      }\n      const flattenedErrors = safe.error.flatten();\n      const formattedErrors = safe.error.format();\n      throw new ZSAError(\"OUTPUT_PARSE_ERROR\", safe.error, {\n        outputParseErrors: {\n          fieldErrors: flattenedErrors?.fieldErrors,\n          formErrors: flattenedErrors?.formErrors,\n          formattedErrors\n        }\n      });\n    }\n    return safe.data;\n  }\n  /** helper function to handle start with timeout checkpoints */\n  async handleStart(args, timeoutStatus) {\n    this.checkTimeoutStatus(timeoutStatus);\n    if (this.$internals.isProcedure)\n      return;\n    for (const fn of this.$internals.onStartFns || []) {\n      await fn({ args });\n      this.checkTimeoutStatus(timeoutStatus);\n    }\n  }\n  /** helper function to handle success with timeout checkpoints */\n  async handleSuccess(args, data, timeoutStatus) {\n    this.checkTimeoutStatus(timeoutStatus);\n    if (this.$internals.isProcedure)\n      return;\n    for (const fn of this.$internals.onSuccessFns || []) {\n      await fn({ args, data });\n      this.checkTimeoutStatus(timeoutStatus);\n    }\n    this.checkTimeoutStatus(timeoutStatus);\n    for (const fn of this.$internals.onCompleteFns || []) {\n      await fn({\n        isSuccess: true,\n        isError: false,\n        status: \"success\",\n        args,\n        data\n      });\n      this.checkTimeoutStatus(timeoutStatus);\n    }\n  }\n  /** helper function to handle errors with timeout checkpoints */\n  async handleError(err, inputRaw, inputParsed) {\n    if (err.message === \"NEXT_REDIRECT\" || err.message === \"NEXT_NOT_FOUND\") {\n      throw err;\n    }\n    if (this.$internals.isProcedure)\n      return [null, err];\n    let customError;\n    if (this.$internals.shapeErrorFns !== void 0) {\n      let accData = void 0;\n      for (const fn of this.$internals.shapeErrorFns) {\n        accData = await fn({\n          err,\n          typedData: {\n            // @ts-expect-error\n            inputParseErrors: err instanceof ZSAError ? err.inputParseErrors : void 0,\n            // @ts-expect-error\n            outputParseErrors: err instanceof ZSAError ? err.outputParseErrors : void 0,\n            inputParsed,\n            inputRaw\n          },\n          ctx: accData\n        });\n      }\n      customError = accData;\n    } else {\n      customError = err instanceof ZSAError ? err : new ZSAError(\"ERROR\", err);\n    }\n    for (const fn of this.$internals.onErrorFns || []) {\n      await fn(customError);\n    }\n    for (const fn of this.$internals.onCompleteFns || []) {\n      await fn({\n        isSuccess: false,\n        isError: true,\n        status: \"error\",\n        error: customError\n      });\n    }\n    if (this.$internals.shapeErrorFns !== void 0) {\n      return [null, customError];\n    }\n    const stringifyIfNeeded = (data2) => typeof data2 === \"string\" ? data2 : JSON.stringify(data2);\n    let formattedErrors;\n    let flattenedErrors;\n    const data = err.data;\n    if (data instanceof zod__WEBPACK_IMPORTED_MODULE_1__.ZodError && customError.code === \"INPUT_PARSE_ERROR\") {\n      formattedErrors = data.format();\n      flattenedErrors = data.flatten();\n    }\n    return [\n      null,\n      {\n        data: stringifyIfNeeded(customError.data),\n        name: customError.name,\n        message: stringifyIfNeeded(customError.message),\n        code: customError.code,\n        fieldErrors: flattenedErrors?.fieldErrors,\n        formErrors: flattenedErrors?.formErrors,\n        formattedErrors\n      }\n    ];\n  }\n  async evaluateInputSchema(args) {\n    const { ctx, opts, noFunctionsAllowed } = args;\n    let inputSchema = this.$internals.inputSchema;\n    if (noFunctionsAllowed && typeof inputSchema === \"function\") {\n      throw new Error(\"Input functions are not suppported yet\");\n    }\n    if (typeof inputSchema === \"function\") {\n      inputSchema = await inputSchema({\n        ctx,\n        previousSchema: opts?.previousInputSchema || zod__WEBPACK_IMPORTED_MODULE_0__.undefined(),\n        request: opts?.request,\n        responseMeta: opts?.responseMeta,\n        previousState: opts?.previousState\n      });\n    }\n    if (inputSchema && !(inputSchema instanceof zod__WEBPACK_IMPORTED_MODULE_0__.ZodType)) {\n      throw new ZSAError(\"ERROR\", \"Input schema must be a ZodType\");\n    }\n    let final;\n    if (!opts?.previousInputSchema) {\n      final = inputSchema;\n    } else if (!inputSchema) {\n      final = opts.previousInputSchema;\n    } else if (instanceofZodTypeObject(opts.previousInputSchema) && instanceofZodTypeObject(inputSchema)) {\n      final = opts.previousInputSchema.merge(inputSchema);\n    } else {\n      final = inputSchema;\n    }\n    opts?.onInputSchema?.(final);\n    return final || zod__WEBPACK_IMPORTED_MODULE_0__.undefined();\n  }\n  /** helper function to parse input data given the active input schema */\n  async parseInputData($data, overrideData, timeoutStatus, ctx, opts) {\n    this.checkTimeoutStatus(timeoutStatus);\n    const inputSchema = await this.evaluateInputSchema({\n      ctx,\n      opts\n    });\n    if (this.$internals.skipInputParsing) {\n      return $data;\n    }\n    let data = $data;\n    if ($data instanceof FormData && this.$internals.inputType !== \"json\") {\n      data = {\n        ...formDataToJson(data, inputSchema),\n        ...this.$internals.inputType !== \"state\" ? overrideData || {} : {}\n      };\n    }\n    const canChangeToUndefined = ($data instanceof FormData || opts?.isFromOpenApiHandler) && canDataBeUndefinedForSchema(inputSchema);\n    if (canChangeToUndefined && data && typeof data === \"object\" && Object.keys(data).length === 0) {\n      data = void 0;\n    }\n    opts?.onArgs?.(data);\n    await this.handleStart(data, timeoutStatus);\n    if (!this.$internals.inputSchema && data !== void 0 && this.$internals.isProcedure) {\n      return void 0;\n    }\n    const safe = await inputSchema.safeParseAsync(data);\n    if (!safe.success) {\n      if (this.$internals.onInputParseError) {\n        await this.$internals.onInputParseError(safe.error);\n      }\n      const flattenedErrors = safe.error.flatten();\n      const formattedErrors = safe.error.format();\n      throw new ZSAError(\"INPUT_PARSE_ERROR\", safe.error, {\n        inputParseErrors: {\n          fieldErrors: flattenedErrors?.fieldErrors,\n          formErrors: flattenedErrors?.formErrors,\n          formattedErrors\n        }\n      });\n    }\n    return safe.data;\n  }\n  /** set a handler function for when the server action starts */\n  experimental_shapeError(fn) {\n    return new _ZodSafeFunction({\n      ...this.$internals,\n      // @ts-expect-error\n      shapeErrorFns: [...this.$internals.shapeErrorFns || [], fn]\n    });\n  }\n  getTimeoutErrorPromise = (timeoutMs) => new Promise((_, reject) => {\n    setTimeout(() => {\n      reject(new ZSAError(\"TIMEOUT\", `Exceeded timeout of ${timeoutMs} ms`));\n    }, timeoutMs);\n  });\n  /** set the handler function for the server action */\n  handler(fn) {\n    const timeoutStatus = {\n      isTimeout: false\n    };\n    const wrapper = async ($args, overrideArgs, opts) => {\n      validateOpts(opts);\n      if (opts?.returnInputSchema) {\n        return await this.getFinalStaticInputSchema({\n          opts\n        });\n      } else if (opts?.returnOutputSchema) {\n        if (typeof this.$internals.outputSchema === \"function\") {\n          throw new Error(\n            \"Cannot return output schema from a function output schema\"\n          );\n        }\n        return this.$internals.outputSchema;\n      }\n      let args;\n      let parsedArgs;\n      if (this.$internals.inputType === \"state\") {\n        args = overrideArgs;\n      } else {\n        args = $args;\n      }\n      let previousState = opts?.previousState || void 0;\n      if (this.$internals.inputType === \"state\" && !this.$internals.isProcedure) {\n        previousState = $args;\n      }\n      try {\n        let ctx;\n        if (this.$internals.isProcedure && opts) {\n          ctx = opts.ctx;\n        } else {\n          ctx = await this.getProcedureChainOutput({\n            // @ts-expect-error\n            args,\n            timeoutStatus,\n            request: opts?.request,\n            responseMeta: opts?.responseMeta,\n            onInputSchema: (schema) => {\n              if (!opts) {\n                opts = {\n                  source: new TOptsSource(() => true)\n                };\n              }\n              opts.previousInputSchema = schema;\n            },\n            previousState\n          });\n        }\n        const input = await this.parseInputData(\n          args,\n          overrideArgs,\n          timeoutStatus,\n          ctx,\n          opts\n        );\n        opts?.onParsedArgs?.(input);\n        parsedArgs = input;\n        this.checkTimeoutStatus(timeoutStatus);\n        const data = await fn({\n          input,\n          ctx,\n          request: opts?.request,\n          responseMeta: opts?.responseMeta,\n          previousState\n        });\n        const parsed = await this.parseOutputData(\n          data,\n          ctx,\n          timeoutStatus,\n          opts\n        );\n        await this.handleSuccess(input, parsed, timeoutStatus);\n        return [parsed, null];\n      } catch (err) {\n        const retryDelay = this.getRetryDelay(err, opts?.attempts || 1);\n        if (retryDelay >= 0) {\n          await new Promise((r) => setTimeout(r, retryDelay));\n          return await wrapper($args, overrideArgs, {\n            ...opts || {},\n            attempts: (opts?.attempts || 1) + 1,\n            source: new TOptsSource(() => true)\n          });\n        }\n        return await this.handleError(err, args, parsedArgs);\n      }\n    };\n    const withTimeout = async (args, overrideArgs, opts) => {\n      const timeoutMs = this.$internals.timeout;\n      if (!timeoutMs)\n        return await wrapper(args, overrideArgs, opts);\n      validateOpts(opts);\n      let gotArgs = void 0;\n      let gotParsedArgs = void 0;\n      return await Promise.race([\n        wrapper(args, overrideArgs, {\n          ...opts || {},\n          onArgs: (args2) => {\n            gotArgs = args2;\n          },\n          onParsedArgs: (parsedArgs) => {\n            gotParsedArgs = parsedArgs;\n          },\n          source: new TOptsSource(() => true)\n        }),\n        this.getTimeoutErrorPromise(timeoutMs)\n      ]).then((r) => r).catch((err) => {\n        timeoutStatus.isTimeout = true;\n        return this.handleError(err, gotArgs, gotParsedArgs);\n      });\n    };\n    if (this.$internals.isProcedure) {\n      const handler = this.$internals.timeout ? withTimeout : wrapper;\n      return new CompleteProcedure({\n        inputSchema: this.$internals.inputSchema,\n        handlerChain: [...this.$internals.procedureHandlerChain, handler],\n        shapeErrorFns: this.$internals.shapeErrorFns,\n        lastHandler: handler,\n        onCompleteFns: this.$internals.onCompleteFns,\n        onErrorFns: this.$internals.onErrorFns,\n        onStartFns: this.$internals.onStartFns,\n        onSuccessFns: this.$internals.onSuccessFns,\n        timeout: this.$internals.timeout,\n        retryConfig: this.$internals.retryConfig\n      });\n    }\n    if (this.$internals.timeout) {\n      return withTimeout;\n    }\n    return wrapper;\n  }\n};\nfunction createZodSafeFunction(isProcedure, parentProcedure) {\n  return new ZodSafeFunction({\n    inputSchema: parentProcedure?.$internals.inputSchema || void 0,\n    outputSchema: void 0,\n    shapeErrorFns: parentProcedure?.$internals.shapeErrorFns || void 0,\n    isChained: parentProcedure !== void 0,\n    isProcedure: isProcedure === true,\n    procedureHandlerChain: parentProcedure?.$internals.handlerChain || [],\n    onCompleteFns: parentProcedure?.$internals.onCompleteFns,\n    onErrorFns: parentProcedure?.$internals.onErrorFns,\n    onStartFns: parentProcedure?.$internals.onStartFns,\n    onSuccessFns: parentProcedure?.$internals.onSuccessFns\n  });\n}\nfunction createServerAction() {\n  return new ZodSafeFunction({\n    inputSchema: void 0,\n    outputSchema: void 0,\n    shapeErrorFns: void 0,\n    procedureHandlerChain: []\n  });\n}\n\n// src/procedure.ts\nvar CompleteProcedure = class {\n  $internals;\n  constructor(params) {\n    this.$internals = params;\n  }\n  /** make a server action with the current procedure */\n  createServerAction() {\n    return new ZodSafeFunction({\n      inputSchema: this.$internals.inputSchema,\n      outputSchema: void 0,\n      procedureHandlerChain: this.$internals.handlerChain,\n      onErrorFns: this.$internals.onErrorFns,\n      onStartFns: this.$internals.onStartFns,\n      onSuccessFns: this.$internals.onSuccessFns,\n      onCompleteFns: this.$internals.onCompleteFns,\n      timeout: this.$internals.timeout,\n      retryConfig: this.$internals.retryConfig,\n      shapeErrorFns: this.$internals.shapeErrorFns\n    });\n  }\n};\nvar createServerActionProcedure = (parent) => {\n  return createZodSafeFunction(true, parent);\n};\nvar chainServerActionProcedures = (first, second) => {\n  return new CompleteProcedure({\n    inputSchema: second.$internals.inputSchema,\n    handlerChain: [\n      ...first.$internals.handlerChain,\n      second.$internals.lastHandler\n    ],\n    lastHandler: second.$internals.lastHandler,\n    timeout: second.$internals.timeout || first.$internals.timeout,\n    retryConfig: second.$internals.retryConfig || first.$internals.retryConfig,\n    shapeErrorFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.shapeErrorFns,\n      second.$internals.shapeErrorFns\n    ),\n    onErrorFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onErrorFns,\n      second.$internals.onErrorFns\n    ),\n    onStartFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onStartFns,\n      second.$internals.onStartFns\n    ),\n    onSuccessFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onSuccessFns,\n      second.$internals.onSuccessFns\n    ),\n    onCompleteFns: mergeArraysAndRemoveDuplicates(\n      first.$internals.onCompleteFns,\n      second.$internals.onCompleteFns\n    )\n  });\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/zsa/dist/index.mjs\n");

/***/ })

};
;